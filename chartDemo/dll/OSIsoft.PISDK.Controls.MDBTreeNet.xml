<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OSIsoft.PISDK.Controls.MDBTreeNet</name>
    </assembly>
    <members>
        <member name="T:OSIsoft.PISDK.Controls.AliasDSSelectDialog">
            <summary>
            Standard file/folder replace confirmation dialog. This dialog is used specifically when
            user copies PIAliases between servers and one or more Tags/PIPoints point to non-local (other then the copy target)
            server.
            The result of the user selection is returned in the <see cref="T:System.Windows.Forms.DialogResult"/> when ShowDialog() returns.
            The possible dialog results are:
            <list type="bullet">
            <item> <description>Ignore - Copy as they are</description></item> 
            <item> <description>OK - Replace with local ones if found</description></item> 
            <item> <description>Abort - Like OK but don't create aliases if local tags not found</description></item> 
            <item> <description>Retry - Create tags (not available)</description></item> 
            <item> <description>Cancel - Abort copy</description></item> 
            </list>
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.AliasDSSelectDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasDSSelectDialog.#ctor">
            <summary>
            Returns a new Alias Datasource Selection/overwrite dialog form.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasDSSelectDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasDSSelectDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.AliasEdit">
            <summary>
            User control that can be used to edit/define the attributes of individual 
            PIAlias objects. This control is a public class but internally it is housed
            inside the AliasEditDlg form. When used directly, the container should provide 
            the logic for accepting the changes made, see <see cref="M:OSIsoft.PISDK.Controls.AliasEdit.acceptChanges"/>.
            The caller should initially set up the control properly, see <see cref="M:OSIsoft.PISDK.Controls.AliasEdit.setup(System.Object,System.Boolean)"/> and 
            <see cref="P:OSIsoft.PISDK.Controls.AliasEdit.EditObject"/> for details. 
            <seealso cref="T:OSIsoft.PISDK.Controls.AliasEditDlg"/>
            </summary>
            <remarks>
            Properties:
            <list type="table"><listheader><term>Name</term><description>Description</description></listheader>
            <item><term><see cref="P:OSIsoft.PISDK.Controls.AliasEdit.EditObject"/></term><description>PIAlias to be edited</description></item>
            <item><term><see cref="P:OSIsoft.PISDK.Controls.AliasEdit.ServerNames"/></term><description>Available Servers</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.AliasEdit.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasEdit.#ctor">
            <summary>
            Returns/creates an AliasEdit user control.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasEdit.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasEdit.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasEdit.setup(System.Object,System.Boolean)">
            <summary>
            Setup the control. Defines the parent node and current viewmode.
            </summary>
            <remarks>
            The parent is used when creating new aliases (ref to the PIAliases collection),
            should be set to null when editing existing aliases. If the parent is defined,
            the EditObject should be left undefined, see <see cref="P:OSIsoft.PISDK.Controls.AliasEdit.EditObject"/> for details.
            </remarks>
            <param name="parent">The parent object, or null</param>
            <param name="viewOnly">Edit mode</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasEdit.acceptChanges">
            <summary>
            Method to be called to actually update the changes to the DB. The container must
            call this method when it thinks that the user has finished with the changes and
            wants to save them.
            </summary>
            <returns>0 if operation OK, fires ErrorEvent and returns -1 if save failed</returns>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.AliasEdit.EditObject">
            <summary>
            Sets the PIAlias that will edited. Returns the edited or newly created PIAlias object.
            </summary>
            <remarks>
            This property should be left undefined if the control is to create a new object.
            The new alias will be available only after the acceptChanges() method has be executed
            succesfully, see <see cref="M:OSIsoft.PISDK.Controls.AliasEdit.acceptChanges"/> for details.
            </remarks>
            <example>
            <code>
            // This example demonstrates how to prepare the control for editing.
            private bool invokeAliasEditor(PIAlias editObj)
            {
            	AliasEdit aliasEdt = new AliasEdit();   // create edit
            	aliasEdt.EditObj = editObj;             // set edit object 
            	aliasEdt.setup(null, false);            // setup/no parent, edit mode
            	// Determine/wait the user to finish...
            	int suc = aliasEdt.acceptChanges();     // save all changes
            	return (0 == suc) ? true : false;       // set return value
            }
            
            // This example demonstrates how to prepare the control to create a new alias.
            private PIAlias createNewAlias(PIAliases parentList)
            {
            	AliasEdit aliasEdt = new AliasEdit();   // create edit
            	aliasEdt.EditObj = null;                // set edit object to null 
            	aliasEdt.setup(parentList, false);      // setup parentlist and edit mode
            	// Determine/wait the user to finish...
            	int suc = aliasEdt.acceptChanges();     // save all changes
            	return (0 == suc) ? aliasEdt.EditObj : null; // set return value
            }
            </code>
            </example>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.AliasEdit.ServerNames">
            <summary>
            List of servers available as datasources. This list is ultimately defined by
            the container and passed to TagSearch control (if it is invoked).
            Defaults to DefaultServer.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.AliasEdit.DBDriver">
            <summary>
            Set the reference to IModuleDB interface class
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.AliasEditDlg">
            <summary>
            Windows form/dialog that contains the AliasEdit user-control. 
            This form does very little, it's main function is to provide the dialog
            buttons (OK, cancel) and a write-through interface for setup parameters.
            On OK-button click, the accepChanges method of the edit control is called
            to save the changes into MDB.
            <seealso cref="T:OSIsoft.PISDK.Controls.AliasEdit"/>
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.AliasEditDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasEditDlg.#ctor">
            <summary>
            Creates/returns a new AliasEditDlg windows form.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasEditDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasEditDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasEditDlg.setup(System.Object,System.Boolean)">
            <summary>
            Set parent and view only mode. Set parent to null if editing and vice versa set
            the EditObject to null if creating new aliases.
            </summary>
            <param name="parent">Parent object if creating a new alias</param>
            <param name="viewOnly">Edit mode</param>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.AliasEditDlg.EditObject">
            <summary>
            Get/set the edit object. Have to provided when editing an existing object.
            Set to null if creating new aliases.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.AliasEditDlg.ServerNames">
            <summary>
            Sets the currently defined servers (names) for the AliasEdit user-control.
            This is done because we want to limit the servers to those that are defined
            by the containing application, i.e. don't want to use all registered servers.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.AliasEditDlg.DBDriver">
            <summary>
            Set the reference to IModuleDB interface class.
            Pass to the editor
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.ConfirmDBModDlg">
            <summary>
            Summary description for ConfirmDBModDlg.
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.ConfirmDBModDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ConfirmDBModDlg.#ctor">
            <summary>
            Returns a new ConfirmDBModDlg
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ConfirmDBModDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ConfirmDBModDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.DateTimeSelect">
            <summary>
            Windows form/dialog containing two framework DateTimePicker controls,
            one for date selection and the other for time.
            The control exposes a property that can be used to define the initial
            date/time shown on the control. The value of the property is updated to match
            the user selections and should be retrieved after the dialog exits.
            The date/time starts from 1/1/1970 GMT, any attempt go use earlier dates will fail.
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.DateTimeSelect.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.DateTimeSelect.#ctor">
            <summary>
            Creates/returns a new instance of the control
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.DateTimeSelect.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.DateTimeSelect.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.DateTimeSelect.queryDate">
            <summary>
            Gets or sets the date/time shown. The default value is NOW. 
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.FileOpDialog">
            <summary>
            Standard file/folder replace confirmation dialog.
            The result of the user selection is returned in the <see cref="T:System.Windows.Forms.DialogResult"/> when ShowDialog() returns.
            The possible dialog results are:
            <list type="bullet">
            <item> <description>Yes - Overwrite this object</description></item> 
            <item> <description>OK - Overwite all objects</description></item> 
            <item> <description>No - Don't overwrite this object</description></item> 
            <item> <description>Cancel - Abort copy</description></item> 
            </list>
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.FileOpDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.FileOpDialog.#ctor">
            <summary>
            Creates a new instance of the form
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.FileOpDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.FileOpDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.FileOpDialog.ObjectName">
            <summary>
            Sets the name of the object to be replaced (write only)
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.FileOpDialog.ObjectType">
            <summary>
            Sets or gets the type of the object to be replaced.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.HeadingEditDlg">
            <summary>
            A dialog form for editing Heading information. 
            This form can be to used to edit existing heading or when creating a new one
            see <see cref="P:OSIsoft.PISDK.Controls.HeadingEditDlg.EditParent"/> and <see cref="P:OSIsoft.PISDK.Controls.HeadingEditDlg.EditHeading"/> properties for setup
            instructions.
            The result of the operation is returned in the DialogResult, either OK or Cancel.
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.HeadingEditDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingEditDlg.#ctor">
            <summary>
            Creates a new instance of the edit form.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingEditDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingEditDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.HeadingEditDlg.EditHeading">
            <summary>
            Get or sets the Heading that is being edited. This should be left undefined
            if creating a new heading.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.HeadingEditDlg.EditParent">
            <summary>
            Parent HeadingSet for a new heading. Should be left undefined if
            editing an existing. 
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.HeadingEditDlg.ViewOnly">
            <summary>
            Sets/gets the view-only mode of this dialog.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.HeadingLevelDialog">
            <summary>
            Dialog for heading level collision within a set. We can either assign a new level,
            cancel the copy for this heading or abort the whole copy operation.
            The result of the user selection is returned in the <see cref="T:System.Windows.Forms.DialogResult"/> when ShowDialog() returns.
            The possible dialog results are:
            <list type="bullet">
            <item> <description>Yes - Reassign this object</description></item> 
            <item> <description>OK - Reassign all objects</description></item> 
            <item> <description>No - Don't Reassign this object</description></item> 
            <item> <description>Cancel - Abort copy</description></item> 
            </list>
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.HeadingLevelDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingLevelDialog.#ctor">
            <summary>
            Creates a new instance of the dialog form.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingLevelDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingLevelDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.HeadingLevelDialog.HeadingLevel">
            <summary>
            Sets or gets the heading level to be reassigned.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.HeadingLevelDialog.SetName">
            <summary>
            Sets or gets the name of heading set for the heading.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.HeadingSetEditor">
            <summary>
            Windows form/dialog that presents a given headingset in a table format (DataGrid). 
            Users can add, delete and edit existing headings in a set. 
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSetEditor.#ctor">
            <summary>
            Creates a new HeadingSetEditor form
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSetEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSetEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSetEditor.setInstanceData(OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Set the tree instance data struct
            </summary>
            <param name="instData"></param>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.HeadingSetEditor.HeadingSet">
            <summary>
            Gets or sets the initial HeadingSet to be edited.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.HeadingSetEditor.ViewOnlyMode">
            <summary>
            Gets ot sets the view-only state of the editor. All controls will be diasables or
            set to read-only mode if this parameter is true;
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.MDBTreeNet">
            <summary>
            Module database tree view control. Provides a uniform way to view/browse and
            manipulate the database. 
            The control provides multiple properties and styles that can be used to fine-tune
            what is shown in the view.
            The functionality is mostly exposed via context menus, which loosely resembly those in Windows
            Explorer. It is possible to copy, move, delete and create new objects. The additional features
            allow users to edit/view object attributes and/or excute certain function or define behaviors
            (reset all, refresh view, usage of EventPipes, defining root nodes to name a few).
            The control provides full drag and drop features that rely on special clipboard formats, such
            as full pathnames and persistence strings. There's very little difference between drag-drop and copy,
            both can be used with external sources or targets and multi-select features.
            </summary>
            <example>
            PROPERTIES EXAMPLE.
            In this example, the public properties of the MDBTreeNet control are used to manipulate the view,
            features and visible item types.
            Create a new Windows Forms project under Visual Studio.NET  and site the MDBTreeNet control on the form.
            Size the control so that it can show few tree nodes. Drag a standard command button from the toolbox onto 
            the form and double-click on the button, switch to code view and replace the "empty" event handler 
            method with the following code:
            // This method manipulates the view style directly and also by setting 
            // individual properties. We disable multi-threading because most of the operations will cause tree refresh 
            // and it is better if this code run synchronously. 
            <code>
            private void button1_Click(object sender, System.EventArgs e) 
            { 
            	bool thdState = mdbTreeNet1.UseUpdateThreads;    // save threading state 
            	mdbTreeNet1.UseUpdateThreads = false; 
            	MDBStyles style = mdbTreeNet1.ViewStyle;             // get initial style, should be DEFAULT style 
            	mdbTreeNet1.DisableHeadings = false; 
            	mdbTreeNet1.DisableOSIConf = false; 
            	mdbTreeNet1.ShowDataValues = true; 
            	mdbTreeNet1.ShowPathAsToolTip = true; 
            	mdbTreeNet1.AutoExpandData = true; 
            	MessageBox.Show(this, "We now have 'maximum view', style has changed to CUSTOM"); 
            	mdbTreeNet1.ViewStyle = MDBStyles.MDBSTYLE_TAGS; 
            	MessageBox.Show(this, "Style is now set to TAGS"); 
            	mdbTreeNet1.DisableContextMenus = true; 
            	mdbTreeNet1.DisableAutoRefresh = true; 
            	mdbTreeNet1.DisableAliases = true; 
            	mdbTreeNet1.DisableProperties = true; 
            	mdbTreeNet1.ShowPIUnitsOnly = false; 
            	mdbTreeNet1.HideQueryDate = true; 
            	mdbTreeNet1.ShowCheckBoxes = false; 
            	MessageBox.Show(this, "We now have 'minimum view', style has changed to CUSTOM"); 
            	mdbTreeNet1.DisableContextMenus = false; 
            	mdbTreeNet1.HideQueryDate = false; 
            	mdbTreeNet1.UseUpdateThreads = thdState;        // restore threading state 
            }
            </code>
            
            
            METHODS AND EVENTS EXAMPLE.
            In this example, the public methods and events of the MDBTreeNet control are used to 
            manipulate the view.
            Create a new Windows Forms project and site the MDBTreeNet control on the form.
            Size the control so that it can show few tree nodes. Select the Events tabs of the MDBTreeNet 
            Properties window and define/double-click on the following events (3):
            nodeExpandingEvent, checkedChangedEvent and errorEvent. 
            Switch to code view and add two private class variables as shown below and then replace the "empty" 
            event handler methods with the following code:
            
            <code>
            private string pathName;             // pathname of the expanding module node 
            private string[] serverNames;        // original server names/list
            // A node is expanding. Check that we have a correct node and then change the image and 
            // make checkboxes visible. 
            private void mdbTreeNet1_nodeExpandingEvent(object sender, OSIsoft.PISDK.Controls.MDBBaseEventArgs e)
            {
            	if (e.TreeNode.ModuleType == MDBNodeTypes.N_MODULE)
            	{ // only continue if this is a module node and checkboxes are invisible
            		if (!mdbTreeNet1.ShowCheckBoxes)
            		{
            			TreeNode nativeNode = (TreeNode)e.TreeNode; // get the native tree node by type cats 
            			IMDBNode parent = (IMDBNode)nativeNode.Parent; // get my parent IMDBNode by type casteing the TreeNode 
            			if (parent.ModuleType == MDBNodeTypes.N_MODULES)
            			{ // continue if this is a top level module 
            				mdbTreeNet1.ShowCheckBoxes = true; // show checkboxes 
            				e.TreeNode.Image = e.TreeNode.Image + 1; // change the image using the IMDBNode 
            				int ok = mdbTreeNet1.setNodeImage(e.TreeNode.FullPathName, e.TreeNode.Image + 1); // set image 
            				MessageBox.Show("Checkboxes should now be visible and the node image has changed. " +
            					 "Please check the node you  expanded");
            			}
            		}
            	}
            }
            
            // The checked state of a node has been changed by the user. See that we have a correct node and phase.
            // Save the current/valid server list, hide checkboxes and the set an invalid server. This will create an error when 
            // user tries to expand it.
            private void mdbTreeNet1_checkedChangedEvent(object sender, OSIsoft.PISDK.Controls.MDBBaseEventArgs e)
            {
            	if (e.TreeNode.ModuleType == MDBNodeTypes.N_MODULE)
            	{ // make sure that the user selected a module node and that we are not in the middle of the events.. 
            		if (mdbTreeNet1.ShowCheckBoxes)
            		{
            			mdbTreeNet1.ShowCheckBoxes = false;     // make checkboxes invisible
            			serverNames = mdbTreeNet1.serverList;   // remeber which servers we use 
            			pathName = e.TreeNode.FullPathName;     // get full pathname for the MDB module 
            			mdbTreeNet1.setCheckedState(pathName, false, false, false, false);     // uncheck me (example only) 
            			MessageBox.Show(this, "CheckBoxes should now be invisible" + Environment.NewLine + 
            				"We'll create an intentional error" + Environment.NewLine +
            				"PLEASE TRY TO EXPAND THE TOP NODE");     // show message 
            			// The following code will delete/reset the tree and the "treeNode" becomes invalid 
            			mdbTreeNet1.serverList = new string[] {"NoSuchThing"}; // set unknown server 
            			e.Handled = true; // remember to cancel this event..the whole tree was deleted 
            		}
            	}
            }
            
            // Show the error message to the user and check if we have an "illegal server" 
            // and restore the original if so. Also locate the last selected node. 
            // IMPORTANT. This code is an example, you should never do any real work in the error handler
            // or manipulate the tree due to possible circular event sequences and other unexpected events.
            private void mdbTreeNet1_errorEvent(object sender, OSIsoft.PISDK.Controls.ErrorEventArgs e)
            {
            	MessageBox.Show(this, e.message); // show received error message 
            	if (this.serverNames != null)
            		this.mdbTreeNet1.serverList = serverNames; // restore servers if defined/correct phase 
            	if (this.pathName != null)
            	{
            		this.mdbTreeNet1.locateModule(this.pathName); // locate previously selected module 
            		MessageBox.Show(this," The tree will now expand to the node you selected");    // tell user what's happening next
            	}
            	pathName = null;            // Remember that we did this...
            	serverNames = null;
            }
            </code>
            Compile and run the project. The form should come up with a single tree node for the 
            default server (make sure that that default server is available). Expand the server 
            and Modules nodes and then expand one of the module nodes. 
            Follow the instructions given at run-time.
            </example>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBTreeNet.tagSearch">
            <summary>
            A single tagsearch class instance so that it remeber the properties between invocations
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.#ctor">
            <summary>
            Creates a new instance of the MDBTreeNet control
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.forceLoad">
            <summary>
            Forces the control to excute the Control.Load code....could be used by clients that don't 
            actually make the control visible (use this just as an object library)
            Throws <exception cref="T:System.ObjectDisposedException"> when calling this method
            when object is already disposed</exception>.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.refreshTree">
            <summary>
            Refresh the tree nicely and quietly.
            Throws <exception cref="T:System.ObjectDisposedException"> when calling this method
            when object is already disposed.</exception>
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.resetTree">
            <summary>
            Reset the tree by brute force, i.e. delete all nodes and recreate the top level.
            Throws <exception cref="T:System.ObjectDisposedException"> when calling this method
            when object is already disposed.</exception>
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.setStyle(OSIsoft.PISDK.Controls.MDBStyles)">
            <summary>
            set the control style.
            Throws <exception cref="T:System.ObjectDisposedException"> when calling this method
            when object is already disposed.</exception>
            </summary>
            <param name="style">Predefined [style to be applied</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.setSelectedState(System.Object,System.Boolean)">
            <summary>
            Select or unselect a node. If the action is unselect, the first root node is made
            the active/selected node of the tree.
            The input node can be a full pathname of the node or an object that is based on TreeNode.
            </summary>
            <param name="node">fullpath or TreeNode</param>
            <param name="newState">True for select</param>
            <returns>0 if method sucessful</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.setNodeImage(System.String,System.Int32)">
            <summary>
            Set an image for a node. The image is an index to the imagelist. An alternative is
            to use the IMDBNode interface directly. This is here so that the image can be set by
            a pathname.
            Throws <exception cref="T:System.ObjectDisposedException"> when calling this method
            when object is already disposed.</exception>
            </summary>
            <param name="fullPath">Full path to the node</param>
            <param name="imageIndex">Index to the imagelist</param>
            <returns>0 if operation ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.setRootModules(System.String[])">
            <summary>
            Set new tree root nodes. The nodes are specified by a pathname
            Throws <exception cref="T:System.ObjectDisposedException"> when calling this method
            when object is already disposed.</exception>
            </summary>
            <param name="fullPaths">Array of valid module pathnames</param>
            <returns>0 if OK</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.locateModule(System.String)">
            <summary>
            Locate, i.e. find, make visible and select the specified module.
            Throws <exception cref="T:System.ObjectDisposedException"> when calling this method
            when object is already disposed.</exception>
            </summary>
            <param name="fullPath">Module pathname</param>
            <returns>0 if module was found</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.setNodeState(System.String,System.Boolean,System.Boolean)">
            <summary>
            Mark/unmark a specified module. Optionally the operation aftects all children.
            Throws <exception cref="T:System.ObjectDisposedException"> when calling this method
            when object is already disposed.</exception>
            </summary>
            <param name="fullPath">module pathname</param>
            <param name="marked">New state, i.e. marked/unmarked</param>
            <param name="updateChildren">Update the children too</param>
            <returns>0 if operation ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.setCheckedState(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Check/uncheck a module and optionally make the module visible, check child modules and
            visible linked modules.
            Throws <exception cref="T:System.ObjectDisposedException"> when calling this method
            when object is already disposed.</exception>
            </summary>
            <param name="fullPath">module pathname</param>
            <param name="marked">new checked state</param>
            <param name="updateChildren">update children</param>
            <param name="makeVisible">should we make the node visible</param>
            <param name="checkLinks">should we check all visible lines</param>
            <returns>0 if OK</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.setContextMenuItem(OSIsoft.PISDK.Controls.MDBNodeTypes,System.Int32,System.Int32,System.String)">
            <summary>
            Modify/Rename context menu item for a given menu.
            Throws <exception cref="T:System.ObjectDisposedException"> when calling this method
            when object is already disposed.</exception>
            </summary>
            <param name="modType">Menu defined as "moduletype"</param>
            <param name="itemIndex">Menu item (index)</param>
            <param name="mainIndex">main menu item if the menu is a submenu</param>
            <param name="newItem">new name</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.setMenuEnabledState(OSIsoft.PISDK.Controls.MDBNodeTypes,System.Boolean)">
            <summary>
            Disable/enable a menu.
            Throws <exception cref="T:System.ObjectDisposedException"> when calling this method
            when object is already disposed.</exception>
            </summary>
            <param name="modType">Menu type defintion; 0 = general menu</param>
            <param name="enabled">Enable or disable menu; true = enable</param>
            <returns>0 if operation ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.modifyServerList(System.String,System.Boolean)">
            <summary>
            Adds or removes one server to/from the currently defined servers list. The tree-view is
            modified accordingly, i.e. a top level node is either added or removed. The existing or 
            remaining tree nodes are not affected, they remain expanded or collapsed.
            Throws <exception cref="T:System.ObjectDisposedException"> when calling this method
            when object is already disposed.</exception>
            </summary>
            <param name="serverName">Name of the server</param>
            <param name="addServer">True if server is added, False if removed</param>
            <returns>0 if OK, negative number if failed. </returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.showValuesView(OSIsoft.PISDK.Controls.ModuleNode)">
            <summary>
            A helper method that invokes the ValuesView dialog (non-modal) for a given module.
            This is used by the ParentEdit/Info dialog.
            </summary>
            <param name="mNode">Node for which to show the dialog</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.getCurrentServers(System.Boolean)">
            <summary>
            Returns the current server list
            </summary>
            <param name="onlyOpenServers">return only open/connected servers</param>
            <returns>list of server objects</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.GetKeyState(System.Int32)">
            <summary>
            DEFINE unmanaged method for key state (CTRL, SHIFT, ALT...)
            </summary>
            <param name="keyCode"></param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.MDBTreeNet_Load(System.Object,System.EventArgs)">
            <summary>
            Control load. Initialize the tree view
            </summary>
            <param name="sender">container</param>
            <param name="e">arguments</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.reset(System.Boolean)">
            <summary>
            initiliaze the tree. Clear the current content and start over from the server
            databases. NOTE: server may not have a valid database so it will show up empty.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBTreeNet.refresh">
            <summary>
            This method will try to refresh quietly
            </summary>
        </member>
        <member name="E:OSIsoft.PISDK.Controls.MDBTreeNet.nodeSelectedEvent">
            <summary>
            Tree node selected event. This event is fired when a the SelectedNode of the
            contained tree control is about to change its value.
            See <see cref="T:OSIsoft.PISDK.Controls.NodeSelectedEventArgs"/> for event arguments.
            <seealso cref="T:OSIsoft.PISDK.Controls.NodeSelectedEventHandler"/>
            </summary>
        </member>
        <member name="E:OSIsoft.PISDK.Controls.MDBTreeNet.nodeExpandingEvent">
            <summary>
            Tree node expanding. This event is fired when a tree node is about to expand.
            See <see cref="T:OSIsoft.PISDK.Controls.MDBBaseEventArgs"/> for event arguments.
            <seealso cref="T:OSIsoft.PISDK.Controls.NodeExpandingEventHandler"/>
            </summary>
        </member>
        <member name="E:OSIsoft.PISDK.Controls.MDBTreeNet.checkedChangedEvent">
            <summary>
            Checked state changed event. This event is fired when the checked state of a node is changing.
            See <see cref="T:OSIsoft.PISDK.Controls.MDBBaseEventArgs"/> for event arguments.
            <seealso cref="T:OSIsoft.PISDK.Controls.NodeCheckedChangedEventHandler"/>
            </summary>
        </member>
        <member name="E:OSIsoft.PISDK.Controls.MDBTreeNet.dragStartEvent">
            <summary>
            Drag start event. This event is fired when user starts dragging a node or nodes.
            See <see cref="T:OSIsoft.PISDK.Controls.MDBBaseEventArgs"/> for event arguments.
            <seealso cref="T:OSIsoft.PISDK.Controls.DragStartEventHandler"/>
            </summary>
        </member>
        <member name="E:OSIsoft.PISDK.Controls.MDBTreeNet.dragEndEvent">
            <summary>
            Drag end event. This event is fired when user drops an object on a node.
            See <see cref="T:OSIsoft.PISDK.Controls.MDBBaseEventArgs"/> for event arguments.
            <seealso cref="T:OSIsoft.PISDK.Controls.DragEndEventHandler"/>
            </summary>
        </member>
        <member name="E:OSIsoft.PISDK.Controls.MDBTreeNet.beforeRefreshEvent">
            <summary>
            Before refresh event. This event is fired when user is about to refresh the node.
            See <see cref="T:OSIsoft.PISDK.Controls.MDBBaseEventArgs"/> for event arguments.
            <seealso cref="T:OSIsoft.PISDK.Controls.RefreshEventHandler"/>
            </summary>
        </member>
        <member name="E:OSIsoft.PISDK.Controls.MDBTreeNet.afterRefreshEvent">
            <summary>
            After refresh event. This event is fired after node refresh.
            See <see cref="T:OSIsoft.PISDK.Controls.MDBBaseEventArgs"/> for event arguments.
            <seealso cref="T:OSIsoft.PISDK.Controls.RefreshEventHandler"/>
            </summary>
        </member>
        <member name="E:OSIsoft.PISDK.Controls.MDBTreeNet.menuSelectedEvent">
            <summary>
            Context menu selected event. This event is fired when a context menu is about to be invoked.
            See <see cref="T:OSIsoft.PISDK.Controls.MenuItemSelectedEventArgs"/> for event arguments.
            <seealso cref="T:OSIsoft.PISDK.Controls.MenuSelectedEventHandler"/>
            </summary>
        </member>
        <member name="E:OSIsoft.PISDK.Controls.MDBTreeNet.itemSelectedEvent">
            <summary>
            Menu item selected event. This event is fired when user selects a menu item.
            See <see cref="T:OSIsoft.PISDK.Controls.MenuItemSelectedEventArgs"/> for event arguments.
            <seealso cref="T:OSIsoft.PISDK.Controls.MenuItemSelectedEventHandler"/>
            </summary>
        </member>
        <member name="E:OSIsoft.PISDK.Controls.MDBTreeNet.errorEvent">
            <summary>
            Error event. This is used to report internal errors to the host.
            See <see cref="T:OSIsoft.PISDK.Controls.ErrorEventArgs"/> for event arguments.
            <seealso cref="T:OSIsoft.PISDK.Controls.ErrorEventHandler"/>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.serverList">
            <summary>
            Get/Set list of servers/database that this control hooks up to.
            This is one way the user app can define the servers, the other alternative
            is to use the <see cref="M:OSIsoft.PISDK.Controls.MDBTreeNet.modifyServerList(System.String,System.Boolean)"/> method. Setting this property
            causes a full reset/reinit of the tree.
            This component will not provide server selection/logins etc.
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.images">
            <summary>
            Image list, i.e. tree icons. These have to be in correct order, see ImageList
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to access the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.ViewStyle">
            <summary>
            Get/set the style of the control.
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.ViewOnly">
            <summary>
            Get/set the view-only property
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.DisableAutoRefresh">
            <summary>
            Get/set the DisableAutoRefresh property
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.PipePollInterval">
            <summary>
            (NOT IMPLEMENTED)Gets or sets the Event pipe polling interval (MaxNotifyFrequency)
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.DisableContextMenus">
            <summary>
            Get/set the noContextMenus property.
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.DisableItemInvoke">
            <summary>
            Get/set if context menu item invoke is disabled.
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.DisableHeadings">
            <summary>
            Get/set if Headings are invisible
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.DisableAliases">
            <summary>
            Get/set if aliases are invisible
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.DisableProperties">
            <summary>
            Get/set if properties are invisible
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.DisableOSIConf">
            <summary>
            Get/set if OSIConf are invisible
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to access the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.ShowPIUnitsOnly">
            <summary>
            Get/set if we show PIUnits only
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.ShowVersionedView">
            <summary>
            Get/set if the control can invoke the value editor form
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.ShowCheckBoxes">
            <summary>
            Get/set if checkboxes are invisible. The tree has a bug, it collapses when we hide
            the checkboxes. We don't quite know which items were expanded at the time (would need to make
            a copy of the tree.....
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to access the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.AutoCheckChildren">
            <summary>
            Gets or sets a value that determines if the children should automatically be checked
            when expanding a checked parent.
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.DisableInPlaceEdit">
            <summary>
            Get/set if in-place edits are not allowed
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.HideQueryDate">
            <summary>
            Get/set if querydate controls are invisible
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.QueryDate">
            <summary>
            Get/set the querydate
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.UseServerTime">
            <summary>
            Gets or sets the value that defines if all timestamps should be converted to/from
            the actual server time instead of local time. 
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.AutoExpandData">
            <summary>
            Should we automatically expand aliases and properties nodes
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.MultiSelect">
            <summary>
            Should we allow user to select multiple nodes simultaneously.
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.ShowPathAsToolTip">
            <summary>
            Should we show tooltips for tree nodes (full pathname).
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.ShowDataValues">
            <summary>
            Should we show alias and property data values in the tree view.
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to access the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.SelectedNodes">
            <summary>
            Returns the currently selected tree nodes
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to access the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.UseUpdateThreads">
            <summary>
            Gets/Sets if background threads should be used during long running updates/refreshes. 
            Important: Disable this when changing multiple properties in a row. Most properties
            invoke the refresh() and it is better to run this scenario synchronously.
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.ConfirmDelete">
            <summary>
            Get or sets a values that defines if the user must confirm all Delete operations.
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to set the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.PISDKReference">
            <summary> 
            Get/Set the PISDK reference. At this time there seems to be a 
            problem with multiple instances so this is a way for the host
            to reuse a single copy(?).
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to access the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.HelpNamespace">
            <summary> 
            Gets or sets the help context (full name of the help-file).
            Throws <exception cref="T:System.ObjectDisposedException"> when trying to access the property
            when object is already disposed</exception>
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.CBTextFormat">
            <summary>
            Object data type (format) that is placed on clipboard as standard text (text format)
            The option are: object names, object pathnames or persistence strings.
            NOTE: The tree control uses 3 formats simultaneously (text, paths, persdistence).
            This setting only affects what the content of the text format is.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.Focused">
            <summary>
            Get the "Focused" property, i.e. is this control the active control
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBTreeNet.ExpandCollectives">
            <summary>
            A value that determines if the highly available PI Collectives 
            should be expanded to show individual member servers instead of 
            the collective itself (admin feature)
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.MDBStyles">
            <summary>
            Define view/behavior style. A style is reflected in public properties, i.e.
            a set of properties is enabled/disabled according to the style
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBStyles.MDBSTYLE_DEFAULT">
            <summary>
            Default style. Control is set to view-only mode, Headings and checkboxes are not visible.
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBStyles.MDBSTYLE_TAGS">
            <summary>
            TagSearch style. Control is set to view-only mode and only aliases and modules are shown.
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBStyles.MDBSTYLE_PIUNITS">
            <summary>
            Show only modules that are units. Sets view-only and hides headings and checkboxes.
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBStyles.MDBSTYLE_ADMIN">
            <summary>
            Administrator mode. Allows editing and shows all node types.
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBStyles.MDBSTYLE_CUSTOM">
            <summary>
            Custom style, user has changed properties after a style setting.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.MDBNodeTypes">
            <summary>
            Module database node types enum. NOTE: some types are synthezised and represent
            some kind of collections for aliases/properties etc.
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeTypes.N_NONE">
            <summary>
            Node is undefined or empty
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeTypes.N_EMPTY">
            <summary>
            Node is defined but not associated with the tree (temporary node)
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeTypes.N_DATABASE">
            <summary>
            Server node
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeTypes.N_HEADINGSETS">
            <summary>
            Top level heading sets collection
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeTypes.N_HEADINGSET">
            <summary>
            HeadingSet node
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeTypes.N_HEADINGS">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeTypes.N_HEADING">
            <summary>
            Type for PIHeading nodes
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeTypes.N_MODULES">
            <summary>
            Top level PIModules collection
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeTypes.N_MODULE">
            <summary>
            Normal PIMOdule node
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeTypes.N_PIUNIT">
            <summary>
            Module node that is a unit
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeTypes.N_MODDATA">
            <summary>
            Data node
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeTypes.N_ALIASES">
            <summary>
            Aliases collection
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeTypes.N_ALIAS">
            <summary>
            Type for PIAlias nodes
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeTypes.N_PROPERTIES">
            <summary>
            Properties collection
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeTypes.N_PROPERTY">
            <summary>
            Type for individual PIProperties
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.MDBNodeImages">
            <summary>
            tree node images, remeber to modify if the imagelist changes
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_NONE">
            <summary>
            Image not defined
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_SERVER">
            <summary>
            Server node image
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_SERVERDISC">
            <summary>
            Image for disconnected/not responding server
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_MODULES">
            <summary>
            Image for top level modules collection
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_MODULE">
            <summary>
            Image for PIModule
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_PIUNIT">
            <summary>
            Image for PIModule that is a unit
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_HDSETS">
            <summary>
            Image for top level heading sets collection
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_HDSET">
            <summary>
            Image for a heading set
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_HEADINGS">
            <summary>
            not used
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_HEADING">
            <summary>
            Image for PIHeading
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_ALIASES">
            <summary>
            Image for Aliases collection
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_ALIAS">
            <summary>
            Image for PIAlias node
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_PROPERTIES">
            <summary>
            Image for properties collection
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_PROPERTY">
            <summary>
            Image for PIProperty node
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_OVERLAY">
            <summary>
            Overlay image used for linked modules
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBNodeImages.IMG_VALUES">
            <summary>
            Additional overlay used to mark modules with multiple values
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.CBTextType">
            <summary>
            Object data type (format) that is placed on clipboard as standard text (text format)
            The option are: object names, object pathnames or persistence strings.
            NOTE: The tree control uses 3 formats simultaneously (text, paths, persdistence).
            This setting only affects what the content of the text format is
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.CBTextType.CBTEXT_NAMES">
            <summary>
            Object name
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.CBTextType.CBTEXT_PATHS">
            <summary>
            Object pathname
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.CBTextType.CBTEXT_PERSISTENCE">
            <summary>
            The persistence string
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.MDBModifyTypes">
            <summary>
            Database modification action type enum
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.DropTargetType">
            <summary>
            Drag and Drop and copy/paste enum representing the relation of the source and target nodes.
            This is used when determining which copy operations are valid and to what degree they are valid.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.MDBBaseEventArgs">
            <summary>
            Event arguments for generic MDB events.
            <seealso cref="T:OSIsoft.PISDK.Controls.NodeExpandingEventHandler"/>
            <seealso cref="T:OSIsoft.PISDK.Controls.NodeCheckedChangedEventHandler"/>
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBBaseEventArgs.treeNode">
            <summary>
            The tree node that is affected by the event. Internal use only
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MDBBaseEventArgs.handled">
            <summary>
            A flag that user can set to indicate that the event was handled. This will in effect
            cancel the event.Internal use only
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MDBBaseEventArgs.#ctor(OSIsoft.PISDK.Controls.IMDBNode)">
            <summary>
            Creates a new instance of the event arguments.
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBBaseEventArgs.TreeNode">
            <summary>
            The tree node that is affected by the event. Internal use only
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MDBBaseEventArgs.Handled">
            <summary>
            A flag that user can set to indicate that the event was handled. This will in effect
            cancel the event.Internal use only
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.NodeSelectedEventArgs">
            <summary>
            Event arguments for "node clicked" events.
            <seealso cref="T:OSIsoft.PISDK.Controls.NodeSelectedEventHandler"/>
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.NodeSelectedEventArgs.#ctor(OSIsoft.PISDK.Controls.IMDBNode,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the base event arguments
            </summary>
            <param name="node">The tree associated with this event</param>
            <param name="selectType">Type of the selection, see <see cref="P:OSIsoft.PISDK.Controls.NodeSelectedEventArgs.selectionType"/></param>
            <param name="rightClick">true if right mouse button was used</param>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.NodeSelectedEventArgs.isRightButton">
            <summary>
            Right mouse button was clicked (readonly)
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.NodeSelectedEventArgs.selectionType">
            <summary>
            Type of selection performed: 0=single, 1-multi; -1=deselect.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.NodeSelectedEventHandler">
            <summary>
            Event delegate for "node selected" events.
            <seealso cref="E:OSIsoft.PISDK.Controls.MDBTreeNet.nodeSelectedEvent"/>
            </summary>
            <example>
            Create a new windows forms application and site the control on a form. 
            Right-click MDBTreeNet and select Properties. Select the Events tab and double-click 
            on the nodeSelectEvent.
            Modify the nodeSelectedEvent handler stub method as follows:
            // A node has been (pre)selected. We will show a message telling which node was selected. We also show how 
            // the node was selected if you hold SHIFT/CTRL button down or use right-click (for menu). 
            // Note that a node may get selected even when it wasn't explicitly selected (during load, exit etc.). 
            <code>
            private void mdbTreeNet1_nodeSelectedEvent(object sender, OSIsoft.PISDK.Controls.NodeSelectedEventArgs e) 
            { 
            	bool notSingle = (int)e.selectionType != 0; 
            	MessageBox.Show(this, "You selected node " + e.TreeNode.ItemName + "." + Environment.NewLine + 
            		" The full pathname is " + e.TreeNode.FullPathName + "." + Environment.NewLine + 
            		"Right button is " +e.isRightButton.ToString() + ", Multi/De-select =" + notSingle.ToString()); 
            	MessageBox.Show(this, "# of selected nodes = " + mdbTreeNet1.SelectedNodes.Count.ToString()+ Environment.NewLine +
            		"MultiSelect enabled = " + mdbTreeNet1.MultiSelect.ToString()); 
            } 
            </code>
            Run the application and see what happens.
            </example>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.NodeExpandingEventHandler">
            <summary>
            Event delegate for "node selected" events
            <seealso cref="E:OSIsoft.PISDK.Controls.MDBTreeNet.nodeExpandingEvent"/>
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.NodeCheckedChangedEventHandler">
            <summary>
            Event delegate for "node checked state changed" events
            <seealso cref="E:OSIsoft.PISDK.Controls.MDBTreeNet.checkedChangedEvent"/>
            </summary>
            <example>
            Create a new windows forms application and site the control on a form. 
            Right-click MDBTreeNet and select Properties. Select the Events tab and double-click 
            on the checkedChangedEvent.
            Modify the checkedChangedEvent handler stub method as follows:
            // The checked state of a node has been changed by the user. Find out which node 
            // it is and what the old state was (note that event fires BEFORE the state changes so you can cancel it). 
            <code>
            private void mdbTreeNet1_checkedChangedEvent(object sender, OSIsoft.PISDK.Controls.MDBBaseEventArgs e) 
            { 
            	OSIsoft.PISDK.Controls.IMDBNode treeNode = e.TreeNode; // get the node interface
            	MessageBox.Show(this, "The old checked state of node " + treeNode.ItemName +
            		" is " + treeNode.CheckedState.ToString());    // show node name and old event state
            } 
            </code>
            Run the application, make the checkboxes visible and check random nodes.
            </example>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.DragStartEventHandler">
            <summary>
            Event delegate for "drag start" events
            <seealso cref="E:OSIsoft.PISDK.Controls.MDBTreeNet.dragStartEvent"/>
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.DragEndEventHandler">
            <summary>
            Event delegate for "drag end" events
            <seealso cref="E:OSIsoft.PISDK.Controls.MDBTreeNet.dragEndEvent"/>
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.RefreshEventHandler">
            <summary>
            Event delegate for "Refresh" events
            <seealso cref="E:OSIsoft.PISDK.Controls.MDBTreeNet.beforeRefreshEvent"/>
            <seealso cref="E:OSIsoft.PISDK.Controls.MDBTreeNet.afterRefreshEvent"/>
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.MenuSelectedEventArgs">
            <summary>
            Event arguments for "Context Menu Selected" events
            <seealso cref="T:OSIsoft.PISDK.Controls.MenuSelectedEventHandler"/>
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.MenuSelectedEventArgs.menu">
            <summary>
            Context menu
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MenuSelectedEventArgs.#ctor(OSIsoft.PISDK.Controls.IMDBNode,System.Windows.Forms.ContextMenu)">
            <summary>
            Creates a new instance of the argements
            </summary>
            <param name="node">The tree node associated with the event</param>
            <param name="menu">The menu that was selected</param>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MenuSelectedEventArgs.SelectedMenu">
            <summary>
            The Context menu that was selected.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.MenuSelectedEventHandler">
            <summary>
            Event delegate for "Menu item Selected" events
            <seealso cref="E:OSIsoft.PISDK.Controls.MDBTreeNet.menuSelectedEvent"/>
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.MenuItemSelectedEventArgs">
            <summary>
            Event arguments for "Menu Item Selected" events
            <seealso cref="T:OSIsoft.PISDK.Controls.MenuItemSelectedEventHandler"/>
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.MenuItemSelectedEventArgs.#ctor(OSIsoft.PISDK.Controls.IMDBNode,System.Windows.Forms.ContextMenu,System.Windows.Forms.MenuItem)">
            <summary>
            Creates a new instance of the event arguments
            </summary>
            <param name="node">The tree node associated with the event</param>
            <param name="menu">The menu that is active</param>
            <param name="item">The menu item that was selected</param>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.MenuItemSelectedEventArgs.SelectedItem">
            <summary>
            The Context menu item that was selected.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.MenuItemSelectedEventHandler">
            <summary>
            Event delegate for "Menu item Selected" events
            <seealso cref="E:OSIsoft.PISDK.Controls.MDBTreeNet.itemSelectedEvent"/>
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.ErrorEventArgs">
            <summary>
            Event arguments for "Error" events
            <seealso cref="T:OSIsoft.PISDK.Controls.ErrorEventHandler"/>
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.ErrorEventArgs.message">
            <summary>
            full error message and description
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.ErrorEventArgs.priority">
            <summary>
            Error priority, not yet in use
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ErrorEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of error event arguments
            </summary>
            <param name="message"></param>
            <param name="prior"></param>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.ErrorEventHandler">
            <summary>
            Event delegate for "Error" events
            <seealso cref="E:OSIsoft.PISDK.Controls.MDBTreeNet.errorEvent"/>
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.SDKInterface">
            <summary>
            Internal class that handles the actual SDK access/interface.
            The basic functions are more like helpers:
            - takes care of creation of the SDK object
            - opens up the servers in polite manner
            - handles the event pipe interface and subscribtions
            - deals with other random things like query date settings and such
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SDKInterface.#ctor(PISDK.PISDKClass)">
            <summary>
            Creates the SDK for from scratch or uses an existing reference
            </summary>
            <param name="mySDKRef">Reference to existing SDK instance (or null)</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SDKInterface.getDefaultServer">
            <summary>
            Returns the name of the default server
            </summary>
            <returns>name of the server</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SDKInterface.reinitializeServers">
            <summary>
            Re-initialize (delete) the current servers/list, they have changed
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SDKInterface.Open(System.String,System.Boolean,PITimeServer.PITime)">
            <summary>
            Open a given server, tries to log in
            </summary>
            <param name="strServerName">Name of the server</param>
            <param name="useEvents">Use event pipes for this connection</param>
            <param name="qDate">Current query date</param>
            <returns>the server object, is null if failed</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SDKInterface.removeServer(System.String)">
            <summary>
            Remove the specified server from the list. Also get rid of the event pipe
            </summary>
            <param name="serverName">Name of the server to remove</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SDKInterface.initEvents">
            <summary>
            This is occasionally (when servers changed etc.) called to make sure
            that the event subscribtions are ok
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SDKInterface.unSubscribeEvents">
            <summary>
            Unsubscribe all events. NOTE. this forces garbage collection in order
            to get rid of the pipes since they may hang around a long while.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SDKInterface.getNextEvent(System.Boolean@,PISDK.Server@)">
            <summary>
            Get next event from event pipe(s) event queue
            </summary>
            <param name="moreObjects">output that tells if there are more events</param>
            <param name="piServer">Server (name) from which the event orginates (out only)</param>
            <returns>the event</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SDKInterface.setMDBQueryDate(PITimeServer.PITime)">
            <summary>
            Set the new query date for defined servers. 
            NOTE: The preset/configurable time format governs the setting. The input time is always a .NET
            DateTime but it either contains the time in server time or client time. We need to do extra
            work here if it is server time base (can't use the LocalTime property of the PITime).
            </summary>
            <param name="qDate">query date to use</param>
            <returns>true if OK</returns>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.SDKInterface.SDKRef">
            <summary>
            get the actual SDK class instance
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.SDKInterface.UseServerTime">
            <summary>
            Gets or sets if the the times should be treated as servertime
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.SDKInterface.PipePollInterval">
            <summary>
            Gets or sets the Event pipe polling interval (MaxNotifyFrequency)
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.SDKInterface.ExpandCollectives">
            <summary>
            Gets or sets the value that determines if server collectives should be
            expanded to member servers
            </summary>
            <returns>name of the server</returns>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.DragDropData">
            <summary>
            Class that implements the special clipboard data formats used during copy/paste and 
            drag/drop. This is a shallow class on top of the native DataObject.
            </summary>
            <example>
            1. Create a Windows Form application for MDBTreeNet user control and position MDBTreeNet on the form.
            2. Add three (3) standard textboxes and make them fairly large. Change the "Multiline" property to TRUE for all three textboxes.
            3. In the Design View, right-click on the first text box (textbox1) and select properties. Select the "events" tab and double-click on the "KeyPressed" event.
            4. Replace the empty method definition by the following code:
            <code>
            
            // This method is called when the user presses a key on the first textbox (textBox1). 
            // if the key sequence is CTRL + V (paste), we will fill the two other textboxes with 
            // clipboard data. The third box will show the Persistence string of the copied module
            // while the second box shows the full pathname. All this naturally assumes that the
            // MDBTreeNet was used to set the data in the first place(either Copy or drag start).
            // Note the we don't cancel the event because we want the "textBox1" do the default paste,
            // i.e. show the normal text data (which is the name of the module).
            private void textBox1_KeyPress(object sender, System.Windows.Forms.KeyPressEventArgs e)
            {
            	if ((int)e.KeyChar == 22)	
            	{	// not very intuive way to catch CTRL + V
            		IDataObject ddData = Clipboard.GetDataObject();				// get data from clipboard
            		if (ddData.GetDataPresent(DragDropFormats.PERSISTENCE))
            		{	// persistence string is present
            			textBox3.Text = ddData.GetData(DragDropFormats.PERSISTENCE).ToString();	// show the persistence string
            		}
            		if (ddData.GetDataPresent(DragDropFormats.PATHNAMES))
            		{	// pathname string is present
            			textBox2.Text = ddData.GetData(DragDropFormats.PATHNAMES).ToString();	// show the pathname string
            		}
            	 }
            }
            </code>
            
            5. Run the application, copy a random node in the tree-view and paste it onto the textbox1 and
            	observe the contents of the two other text boxes. Stop the application.
            6. Change the "AllowDrop" property of the textbox1 to true, select Events tab and double-click
            	on DragEnter and DragDrop events. Switch to code view and replace the code stubs with:
            
            <code>
            
            // This method is called when drag/drop operation enters the textbox. We will change
            // the drag image to match "COPY" if the desired formats are present in the passed DataObject
            private void textBox1_DragEnter(object sender, System.Windows.Forms.DragEventArgs e)
            {
            	if (e.Data.GetDataPresent(DragDropFormats.PATHNAMES)) 
            		e.Effect = DragDropEffects.Copy;
            	else
            		e.Effect = DragDropEffects.None;
            }
            
            // This method is called when the user drops data from MDBTreeNet on the textbox.
            // We will use the DataObject that is passed with event arguments to access the
            // data but otherwise the operations are equivalent to the "paste" example.
            private void textBox1_DragDrop(object sender, System.Windows.Forms.DragEventArgs e)
            {
            	if (e.Data.GetDataPresent(DragDropFormats.PATHNAMES)) 
            		textBox2.Text = e.Data.GetData(DragDropFormats.PATHNAMES).ToString();
            	if (e.Data.GetDataPresent(DragDropFormats.PERSISTENCE)) 
            		textBox3.Text = e.Data.GetData(DragDropFormats.PERSISTENCE).ToString();
            }
            </code>
            
            7. Run the application, expand nodes and drag a node onto textbox1, the results should be 
            	same as in previous example.
            </example>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.DragDropData.RegisterClipboardFormat(System.String)">
            <summary>
            DEFINE unmanaged method for registering new clipboard formats
            </summary>
            <param name="lpString">Format string</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.DragDropData.GetData(System.String)">
            <summary>
            Get data from clipboard
            </summary>
            <param name="format">Clipboard/data format to get</param>
            <returns>Clipboard data for the specified format</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.DragDropData.GetDataPresent(System.String)">
            <summary>
            Check if clipboard has data for this format
            </summary>
            <param name="format">Format string</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.DragDropData.SetData(System.String,System.Object)">
            <summary>
            Set clipboard data in specified format
            </summary>
            <param name="format">Format string</param>
            <param name="data">The data object</param>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.DragDropFormats">
            <summary>
            Clipboard format definitions for full pathnames and persistence strings
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.DragDropFormats.PATHNAMES">
            <summary>
            Defines the full pathname format
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.DragDropFormats.PERSISTENCE">
            <summary>
            Defines the persistence string format
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.IModuleDB">
            <summary>
            MDB dispatcher interface definition
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.ModuleDB">
            <summary>
            A glue between the main user control/internal tree control and the tree/database
            nodes. The class mainly contains helper methods and dispatching stuff.
            REMINDER: this class could be the primary interface to the tree/nodes  
            from external world that have they own UI (like web-servers/ASP/HTML). So take UI
            stuff out and put the properties/methods (the API) in place. 
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.#ctor(OSIsoft.PISDK.Controls.MDBTreeNet,System.Windows.Forms.TreeView,OSIsoft.PISDK.Controls.SDKInterface)">
            <summary>
            create a new ModuleDB driver class with refs back to the SDK and the main control.
            These allow us to access the properties and methods of these classes.
            </summary>
            <param name="mainControl">The tree control itsef</param>
            <param name="mainTree">The encapsulted native tree view control</param>
            <param name="piSDKClass">PISDK reference</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.Dispose">
            <summary>
            Try to get rid of this thing. THE SDK seems to be hanging around, maybe
            due to slow/random garbage collection. This is trying to help/force things
            out but doesn't really help (as expected!). Currently this is called from
            the UserControl dispose()
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.reportError(System.Object,System.String)">
            <summary>
            Generic error reporting interface
            </summary>
            <param name="sender">The object who generated the error</param>
            <param name="errMsg">The full error message</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.useServerTime">
            <summary>
            Returns the flag indicating if all times should be in server time (zone).
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.getHelpNamespace">
            <summary>
            Internal helper that returns the help namespace (full name of the help file).
            This is used by various dialogs and forms.
            </summary>
            <returns>Helpfile name</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.reset(System.String[],System.Boolean)">
            <summary>
            Reset the tree, i.e. start from scratch
            </summary>
            <param name="serverNames">list of server names</param>
            <param name="forceInit">do we force event pipe reinit?</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.expandNode(OSIsoft.PISDK.Controls.ITvwNode)">
            <summary>
            expand a given node
            </summary>
            <param name="node">tree node</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.refreshTree">
            <summary>
            Smooth treeview refresh. First gets the KeyItem instance that belongs to
            this node from the dictionary/key map and then calls the update method on that
            instance. This is repeated for all root nodes.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.getViewModes(System.Boolean@,System.Boolean@)">
            <summary>
            get the view modes like view-only
            This is a utility method used by the tree node classes.
            </summary>
            <param name="viewOnly"></param>
            <param name="valueView"></param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.isAliasDisabled">
            <summary>
            are aliases disabled
            </summary>
            <returns>true if disabled</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.isPropertyDisabled">
            <summary>
            are properties disabled
            </summary>
            <returns>true if disabled</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.isPIUnitsOnly">
            <summary>
            do we only show PIUnits
            </summary>
            <returns>true if yes</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.isHeaderDisabled">
            <summary>
            are headings disabled
            </summary>
            <returns>true if disabled</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.isOSIDisabled">
            <summary>
            is %OSI disabled
            </summary>
            <returns>true if disabled</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.showDataValues">
            <summary>
            Should we show alias and property data values
            </summary>
            <returns>true if we should show alias and property data</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.autoExpandAP">
            <summary>
            Should we automatically expand aliases and properties collections?
            </summary>
            <returns>true if we should</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.useUpdateThreads">
            <summary>
            Should we use background threads when updating large child collections.
            This is a global setting derived from the main tree instance
            </summary>
            <returns>true if using threads</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.getMDBTreeReference">
            <summary>
            Get a reference to the tree view/control
            </summary>
            <returns>MDBTreeNet reference</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.getInstanceData">
            <summary>
            Returns the instance data object for the currecnt tree control instance
            </summary>
            <returns>The instance data class</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.invokeDBModify(OSIsoft.PISDK.Controls.MDBModifyTypes,OSIsoft.PISDK.Controls.MDBNodeTypes)">
            <summary>
            Handles MDB modification requests for the currently selected node.
            This version is used for "New item" actions, i.e. a creation of a new node
            and database object.
            First gets the KeyItem instance that belongs to the selected node from the
            dictionary/key map and then invokes the "MakeNewNode" on that instance. The
            KeyItem makes sure that all tree node instances get updated correctly if an 
            object was added.
            </summary>
            <param name="modifyAction">The action to perform</param>
            <param name="nodeType">Type of the node for the action (New)</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.setSourceActionType(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Helper used during drag/drop to specify what type of copy we should perform.
            The possible actions are copy, copy all and cut. This justs sets the internal
            variable (same as when context menu item copy/copy all/cut is selected).
            </summary>
            <param name="modifyAction">Copy type</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.invokeDBModify(OSIsoft.PISDK.Controls.MDBModifyTypes,System.Boolean)">
            <summary>
            Handles MDB modification requests for the currently selected nodes
            This version is used for anything else that New.
            First gets the KeyItem instance that belongs to the selected node from the
            dictionary/key map and then invokes the proper method on that instance. The
            KeyItem makes sure that all tree node instances get updated correctly if an 
            object was modfied/copied and so forth.
            </summary>
            <param name="modifyAction">the action to perform</param>
            <param name="doClipboard">Copy data to/From clipboard too</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.invokeDBModify(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Handles MDB modification requests for the currently selected nodes
            This version is used for anything else that New.
            First gets the KeyItem instance that belongs to the selected node from the
            dictionary/key map and then invokes the proper method on that instance. The
            KeyItem makes sure that all tree node instances get updated correctly if an 
            object was modfied/copied and so forth.
            </summary>
            <param name="modifyAction">the action to perform</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.makeRootNodes(System.Windows.Forms.TreeNode[])">
            <summary>
            Make these nodes root nodes. 
            </summary>
            <param name="rootNodes">Array of nodes</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.getModuleByPath(System.String,System.Boolean)">
            <summary>
            Get PIModule by fullpath, i.e. \\server\mod1\mod2...and optionally make the it visible.
            The function return ITvwNode interface for the located PIModule. This interface is either
            an existing TVwNode/TreeNode or a newly created wrapper, in which case the the object
            is not totally intitalized(don't try to cast it to TreeNode).
            NOTE: There's still a problem with this if current root is not s server.
            </summary>
            <param name="fullPath">MDB pathname for the module</param>
            <param name="makeVisible">Make the node visible. Creates real tree objects</param>
            <returns>ITvwNode interface, null if node not found</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.getModuleForUID(System.String,System.String,System.Boolean)">
            <summary>
            A utility method to get a correct node from Node Collection/cache for a given 
            UID. In many cases there are multiple nodes for a given UID (linked modules..).
            This method uses a match string against the FullPath (TreeNode) to match the 
            correct node.
            </summary>
            <param name="uid">Node ID to look up</param>
            <param name="nameToMatch">Match string for Node.FullPath, not used if there is only one node</param>
            <param name="useTreeNodePath">Use the TreeNode path instead of MDB pathname for name match (faster)</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.makeBaseNodeForType(OSIsoft.PISDK.Controls.MDBNodeTypes)">
            <summary>
            A utility method that gets the base instance for a given node type. The base instance
            holds the tree instance specific "global data" for a given node type
            </summary>
            <param name="nodeType">Type of the node to get</param>
            <returns>Base node/instance interface</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.makeDataObject(System.Collections.SortedList)">
            <summary>
            A utility method that creates a DataObject for copy/paste and drag/drop. The actual
            data consists of 3 separate formats/items, object names as Text, object pathnames as
            PATHNAMES and persistence strings as PERSISTENCE.
            </summary>
            <param name="selectedNodes">The nodes to copy to clipboard</param>
            <returns>Data object that can be placed on clipboard</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.restoreFromDatObject(System.Windows.Forms.IDataObject)">
            <summary>
            Utility method that creates "dummy" TvwNode object for each persistence string/object
            in the current drag/drop object. The returned values are not "real" node objects because
            they do not (possibly) live in the treeview, they may come fromother programs/views. We
            basically want to use these as temp. cache (objects and types)
            </summary>
            <param name="dragData">The data object associated with drag/drop or coy/paste/move</param>
            <returns>A list of dummy TvwNodes, one for each persistence </returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.handleDBEvent(PISDK.PIEventObject,PISDK.Server)">
            <summary>
            Handles events from event pipe. This code is very small, we just acquire the KeyItem
            instance that belongs to the edited module and call its update method to refresh the
            tree.
            </summary>
            <param name="evt">Event data</param>
            <param name="piServer">Server from which the data comes from</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.openServerByName(System.String)">
            <summary>
            Open and initialize connection to a defined server. This is used when
            server node is expanded for the first time or by public methods that
            are called before the load of the main control (locate, setRoot ..)
            </summary>
            <param name="serverName">server to open</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.getLastQueryDate">
            <summary>
            Returns the last defined query date
            </summary>
            <returns>Query Date as PI time object</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.isSecondaryNode(PISDK.Server,System.String)">
            <summary>
            Check if the defined server is secondary node
            </summary>
            <param name="membServer">Possible open server</param>
            <param name="servName">Alternatively a member name</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.getCollectiveInfo(System.String,System.String@,System.String@)">
            <summary>
            Checks if a given server name is actually a collective\member name and
            then breaks the name to collective and member names.
            THIS IS TRULY STATIC method
            </summary>
            <param name="servName">The name to check</param>
            <param name="collName">returned collective name, empty if not collective</param>
            <param name="membName">returned member name, empty if not collective</param>
            <returns>true if collective</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleDB.getServerName(PISDK.Server)">
            <summary>
            Returns the name of this server. The name is the servername for normal servers
            but is "collective\member" for collective member servers.
            THIS IS TRULY STATIC method
            </summary>
            <param name="serv">Server to check</param>
            <returns>The internal name of this </returns>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.ModuleEdit">
            <summary>
            PIModule edit/maintenance form. This form is used when creating new modules
            and/or editing existing ones.
            The container application must properly setup the form before it is shown,
            use <see cref="P:OSIsoft.PISDK.Controls.ModuleEdit.EditModule"/> and <see cref="M:OSIsoft.PISDK.Controls.ModuleEdit.setParentNode(System.Object,PISDK.PIHeadingSets,System.Boolean,System.Boolean)"/> to define the operating
            mode (edit or create new) and other required parameters.
            This control does not automatically save the changes, the host application must use
            the <see cref="M:OSIsoft.PISDK.Controls.ModuleEdit.applyChanges"/> to accomplish this.
            <seealso cref="T:OSIsoft.PISDK.Controls.ModuleEditDlg"/>
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.ModuleEdit.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleEdit.#ctor">
            <summary>
            Creates a new instance of ModuleEdit user control
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleEdit.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleEdit.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleEdit.setParentNode(System.Object,PISDK.PIHeadingSets,System.Boolean,System.Boolean)">
            <summary>
            Set the parent's module list reference. The new module is inserted into
            this list. This method also provides the headinsets collection used when
            assigning a heading to a module and the view-only mode argument (edits not 
            allowed if true).
            </summary>
            <param name="parentObject">parent ref. for New (must be null for edits)</param>
            <param name="headSets">A reference to HeadingSets </param>
            <param name="opMode">true = view only</param>
            <param name="isUnit">true = Creating a PIUnit</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleEdit.applyChanges">
            <summary>
            Apply the changes that were made. This is normally called when the OK
            button on the main dialog is clicked. The caller can retrieve the new PIModule
            if this call completes without errors.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.ModuleEdit.EditModule">
            <summary>
            Property for the created/edited node. User should set this for edit/view
            functions before this form is shown and then retrieve it after the creation was
            ok. NOTE: Newer set this for NEW. The parent must be set before the load event,
            see <see cref="M:OSIsoft.PISDK.Controls.ModuleEdit.setParentNode(System.Object,PISDK.PIHeadingSets,System.Boolean,System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.ModuleEditDlg">
            <summary>
            Main dialog form/container for the ModuleEdit user control. Provides the dialog
            form buttons/functionality along a shallow pass-thru interface for setup data, see
            <see cref="P:OSIsoft.PISDK.Controls.ModuleEditDlg.NewNode"/> and <see cref="M:OSIsoft.PISDK.Controls.ModuleEditDlg.setParentNode(System.Object,PISDK.PIHeadingSets,System.Boolean,System.Boolean)"/> for details.
            The results are returned in the <see cref="T:System.Windows.Forms.DialogResult"/> of this dialog, possible values
            are OK and Cancel.
            <seealso cref="T:OSIsoft.PISDK.Controls.ModuleEdit"/>
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.ModuleEditDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleEditDlg.#ctor">
            <summary>
            Creates a new instance of ModuleEditDlg dialog form
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleEditDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleEditDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleEditDlg.setParentNode(System.Object,PISDK.PIHeadingSets,System.Boolean,System.Boolean)">
            <summary>
            Set the parent's module list reference. The new module is inserted into
            this list. This method also provides the headinsets collection used when
            assigning a heading to a module and the view-only mode argument (edits not 
            allowed if true).
            </summary>
            <param name="parent">parent ref. for New (can be null for edits)</param>
            <param name="headSets">A reference to HeadingSets </param>
            <param name="opMode">true = view only</param>
            <param name="isUnit">true = Creating a PIUnit</param>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.ModuleEditDlg.NewNode">
            <summary>
            Property for the created/edited node. User should set this for edit/view
            functions before this form is shown and then retrieve it after the creation was
            ok. NOTE: Newer set this for NEW. The parent must be set before the load event,
            see <see cref="M:OSIsoft.PISDK.Controls.ModuleEditDlg.setParentNode(System.Object,PISDK.PIHeadingSets,System.Boolean,System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.ObjectNotFoundDlg">
            <summary>
            Dialog that is used when data/server is not available duting copy.
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.ObjectNotFoundDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ObjectNotFoundDlg.#ctor">
            <summary>
            Creates this dialog
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ObjectNotFoundDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ObjectNotFoundDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.ObjectNotFoundDlg.ErrorMessage">
            <summary>
            Sets the error message to show.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.ParentEditDlg">
            <summary>
            This class is designed to assist users to find complete information about all possible
            parent modules of a given linked module.
            The dialog form is composed of three separate lists: parent names, effective dates and 
            all possible parent paths. The two later ones are shown for the selected parent (name).
            The information for the original, i.e. the parent tree node when the dialog was invoked, is
            shown on bold.
            User can invoke ModuleEdit and/or ValueView dialogs for the currectly selected parent (value).
            It is also possible to try to locate the parent in the tree by seletecting a given pathname (and
            find...).
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.ParentEditDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ParentEditDlg.#ctor">
            <summary>
            Returns a new inctance of the form.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ParentEditDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ParentEditDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.ParentEditDlg.EditModule">
            <summary>
            Linked module whose parent information we will show. This property has to be
            set before the form loads.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.ParentEditDlg.IsViewOnly">
            <summary>
            Set (or gets) value that determines if editing is allowed
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.ParentEditDlg.ConfirmDelete">
            <summary>
            Get or sets a values that defines if the user must confirm all Delete operations.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.PropertyEdit">
            <summary>
            User control that can be used to edit/define the attributes of individual 
            PIProperty objects. This control is a public class but internally it is housed
            inside the PropertyEditDlg form. When used directly, the container should provide 
            the logic for accepting the changes made, see <see cref="M:OSIsoft.PISDK.Controls.PropertyEdit.acceptChanges"/>.
            The caller should initially set up the control properly, see <see cref="M:OSIsoft.PISDK.Controls.PropertyEdit.setup(System.Object,System.Boolean)"/> and 
            see <see cref="P:OSIsoft.PISDK.Controls.PropertyEdit.EditObject"/>
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.PropertyEdit.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyEdit.#ctor">
            <summary>
            Create a new instance of PpropertyEdit user control
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyEdit.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyEdit.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyEdit.setup(System.Object,System.Boolean)">
            <summary>
            Setup the control. Defines the parent node and current viewmode. The
            parent is used when creating new properties (ref to the owner PIModule/PIProperty) and
            should be set to null when editing existing objects. If the parent is defined,
            the EditObject should be set to null, see <see cref="P:OSIsoft.PISDK.Controls.PropertyEdit.EditObject"/> for details.
            </summary>
            <param name="parent"></param>
            <param name="viewOnly"></param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyEdit.acceptChanges">
            <summary>
            Method to be called to actually update the changes to the DB.
            </summary>
            <returns>0 if operation OK</returns>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.PropertyEdit.EditObject">
            <summary>
            Reference to the object to be edited, should be set to null if creating new properties.
            The new Property (if creating new) will be returned after the acceptChanges() method has be executed
            succesfully, see <see cref="M:OSIsoft.PISDK.Controls.PropertyEdit.acceptChanges"/> for details.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.PropertyEditDlg">
            <summary>
            Windows form/dialog that contains the PropertyEdit user-control. 
            This form does very little, it's main function is to provide the dialog
            buttons (OK, Cancel) and a write-through interface for setup parameters.
            On OK-button click, the accepChanges method of the edit control is called
            to save the changes into MDB.
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.PropertyEditDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyEditDlg.#ctor">
            <summary>
            Creates a noew instance of the PropertyEditDlg dialog form.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyEditDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyEditDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyEditDlg.setup(System.Object,System.Boolean)">
            <summary>
            Get/set the edit object. Have to provided when editing an existing object.
            Set to null if creating new objects.
            </summary>
            <param name="parent"></param>
            <param name="viewOnly"></param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyEditDlg.exitWithResult(System.Windows.Forms.DialogResult)">
            <summary>
            An internal method that allows the contained control to force exit 
            with specified dialogresult
            </summary>
            <param name="result">Dialog result</param>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.PropertyEditDlg.EditObject">
            <summary>
            Get/set the edit object. Have to provided when editing an existing object.
            set to null for NEW
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.SearchModuleDlg">
            <summary>
            Common search module dialog. This is used to assist users to assign a 
            MDB object to a property value.
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.SearchModuleDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SearchModuleDlg.#ctor">
            <summary>
            Creates a new SearchModuleDlg form.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SearchModuleDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SearchModuleDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.SearchModuleDlg.SelectedObject">
            <summary>
            Returns the currently select MDB object
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.SearchModuleDlg.StartObjectPath">
            <summary>
            Sets the initial object path to locate/show. May not work if server is not opened.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.SecurityEdit">
            <summary>
            Summary description for SecurityEdit.
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.SecurityEdit.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SecurityEdit.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SecurityEdit.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SecurityEdit.applyChanges">
            <summary>
            Apply the security changes (commit to DB)
            </summary>
            <returns>True if commit successful</returns>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.SecurityEdit.EditModule">
            <summary>
            Sets or gets the ModuleDB object whose security is viewed/edited.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.SecurityEdit.AccessRights">
            <summary>
            Get the current access rights string. The EditModule has be initialized before this property is read. 
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.SecurityEdit.RPCInvokerClass">
            <summary>
            Sets or gets the instance of the RPCInvoker class created for the object
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.SecurityEdit.ReadOnly">
            <summary>
            Sets or gets the read-only status of the control, i.e if user can modify the settings
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.RPCInvoker">
            <summary>
            A utility class that provides RPC invoke interfaces for certain features, mainly security.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.RPCInvoker.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.RPCInvoker.#ctor(System.Object)">
            <summary>
            Constructor that takes the base/parent object and prepares the instance for security edits.
            </summary>
            <param name="baseObject">The edit/base/pasrent object for security calls</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.RPCInvoker.getRPCReturnData">
            <summary>
            Get the collection that was returned with the last rpc (may be null)
            </summary>
            <returns>Returned data</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.RPCInvoker.getAccessRights">
            <summary>
            Get the current access rights string. The EditModule has be initialized before this property is read. 
            </summary>
            <returns>The access rights strings</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.RPCInvoker.setupBaseObject(System.Object)">
            <summary>
            Method that sets up the class and prepares it to edit/acquire security settings for a
            given object. The alternative to this is to use the constructor that takes an object.
            </summary>
            <param name="baseObject">The bas object for the security settings</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.RPCInvoker.setPermissionsForBase(System.String,System.String,System.String)">
            <summary>
            Sets the permissions for the "base" object that is already set via constructor/setupBase
            </summary>
            <param name="ownerStr">Owner name</param>
            <param name="groupStr">Group name</param>
            <param name="accessStr">The access rights string</param>
            <returns>true if ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.RPCInvoker.setInheritPermissions(System.String)">
            <summary>
            Set permissions based on the parent/inherited permssions.
            </summary>
            <param name="objectUID">Object UID for which the permissions are set</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.RPCInvoker.setPermissions(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Set permssions/access rights for a given object. Can also be used to rename owners/groups
            </summary>
            <param name="ownerStr">Owner name</param>
            <param name="groupStr">Group name</param>
            <param name="accessStr">The access rights string</param>
            <param name="objectGUID">GUID for the object</param>
            <param name="targetType">Target type of the call</param>
            <returns>true if ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.RPCInvoker.getDBSecurity">
             <summary>
            Do the RPC to get Module database security 
             </summary>
             <returns>tru if operation ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.RPCInvoker.getPermsFromServer">
            <summary>
            Retrieve access rights for a given object
            </summary>
            <returns></returns>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.SecurityEditDlg">
            <summary>
            A dialog form that allows users to edit and view module security attributes.
            The form exposes the following items per module: owner, group and access permissions.
            The caller should supply this form with a valid ModuleDB object that has security attributes
            and GUID, <see cref="P:OSIsoft.PISDK.Controls.SecurityEditDlg.EditModule"/> for details.
            </summary>
        </member>
        <member name="F:OSIsoft.PISDK.Controls.SecurityEditDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SecurityEditDlg.#ctor">
            <summary>
            Creates this form.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SecurityEditDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.SecurityEditDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.SecurityEditDlg.EditModule">
            <summary>
            Sets or gets the ModuleDB object whose security is viewed/edited.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.SecurityEditDlg.AccessRights">
            <summary>
            Get the current access rights string. The EditModule has be initialized before this property is read. 
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.SecurityEditDlg.RPCInvokerClass">
            <summary>
            Sets or gets the instance of the RPCInvoker class created for the object
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.SecurityEditDlg.ReadOnly">
            <summary>
            Gets or sets the read-only status of editor, i.e. if the user is allowed to modify the settings 
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.TreeInstanceData">
            <summary>
            This class holds "global" data for each instance of the MDBTreeNet and the associated/contained
            classes. This also provides services to access/modify that data.
            Most often this class would not be required because few user controls create instances of themselves.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TreeInstanceData.#ctor(OSIsoft.PISDK.Controls.IModuleDB)">
            <summary>
            Creates an instance of this class for a given instance of the tree/database driver.
            </summary>
            <param name="dbDriver">The ModuleDB instance that serves this instance of the tree</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TreeInstanceData.freeResources">
            <summary>
            method that cleans internal resources...maybe not be needed and should be
            someplace else...
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TreeInstanceData.getUIDMap">
            <summary>
            Get the dictionary that maps the MDB objects and the tree nodes with a UID 
            </summary>
            <returns>The only instance of ModuleCollection class</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TreeInstanceData.getDBDriver">
            <summary>
            Get the ModuleDB instance for this tree instance
            </summary>
            <returns>The only instance of ModuleDB interface</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TreeInstanceData.incrementThreadCount">
            <summary>
            Increment internal thread count. This call fails if the current count exceeds the configured
            limit. There's no locks/waits so this is not fullproof code. Exceeding the max count
            is not deemed that important, we just want to make sure that we don't try to create huge
            amounts of background threads.
            </summary>
            <returns>The number of threads running plus one. Returns 0 if max count was exceeded.</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TreeInstanceData.decrementThreadCount">
            <summary>
            Decrements the number of active/running threads
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TreeInstanceData.getBaseModule(OSIsoft.PISDK.Controls.ITvwNode)">
            <summary>
            Returns the tree instance specific base node instance for a given node.
            </summary>
            <param name="instanceModule">Node instance for which the base node is fetched</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TreeInstanceData.getBaseModule(OSIsoft.PISDK.Controls.MDBNodeTypes)">
            <summary>
            Returns the tree instance specific base node instance for a given node type.
            </summary>
            <param name="nodeType">Type of the base node to get</param>
            <returns></returns>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TreeInstanceData.RunningThreads">
            <summary>
            Number of currently running background threads
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.IMDBNode">
            <summary>
            Public interface for a tree view node. This is the only interface/object that is
            directly exposed to external users. However, there are no implicit restrictions so the users
            can cast this interface to a concreate class intance based on the module/node type.
            The interface is quite simple but should offer the most important features/data. 
            </summary>
            <example>
            This example demonstrates how to utilize the various properties of the IMDBNode object
            that the application receives as one of the event arguments.
            To use this example, create a WinForm application and place MDBTreeNet and a TextBox control
            onto the form. Set the MultiLine property of the textbox to true and make the box fairly big.
            Finally select "nodeSelectedEvent" of the MDBTreeNet and replace the event handler with:
            <code>
            private void mdbTreeNet1_nodeSelectedEvent(object sender, OSIsoft.PISDK.Controls.NodeSelectedEventArgs e)
            {
            	MDBNode iNode = e.TreeNode;		// get the IMDBNode interface instance
            	System.Windows.Forms.TreeNode nativeNode = (TreeNode)iNode; // cast to native tree node
            	string text = "---- NODE INFORMATION ----" + Environment.NewLine;	// title
            	text += "Name: " + iNode.ItemName + " Text:" + nativeNode.Text + Environment.NewLine;	// text and name
            	text += "Path:" + iNode.FullPathName + Environment.NewLine;	// full path
            	if (nativeNode.Parent != null)
            	text += "Parent text:" + nativeNode.Parent.Text	 + Environment.NewLine;	// Parent name
            	text += "# of child nodes:" + nativeNode.Nodes.Count.ToString() + Environment.NewLine;	// child count
            	text += "Type:" + iNode.ModuleType.ToString();				// module type
            	textBox1.Text = text;										// show text
            }
            </code>
            </example>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.IMDBNode.PersistenceString">
            <summary>
            Returns the persistence string if present, otherwise an empty string
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.IMDBNode.FullPathName">
            <summary>
            Returns the full MDB pathname if present, otherwise an empty string. 
            The generic pathname format is: \\server\module1\module2...
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.IMDBNode.ItemName">
            <summary>
            Returns the name of this object
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.IMDBNode.ModuleType">
            <summary>
            Returns the type of this object
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.IMDBNode.ModuleRef">
            <summary>
            Returns the MDB object reference of this node object
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.IMDBNode.UniqueID">
            <summary>
            Returns the unique ID for a module. Returns an empty string if object doen't have an ID
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.IMDBNode.Image">
            <summary>
            Sets/gets the image (index) for this object
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.IMDBNode.Selected">
            <summary>
            Gets or sets the "selected" state of this node
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.IMDBNode.CheckedState">
            <summary>
            Gets or sets the "Checked" state of this node
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.IMDBNode.EnabledState">
            <summary>
            Gets or sets the "Enabled/grayed out" state of this node
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.ITvwNode">
            <summary>
            Tree/database node interface definition, internal use only.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.TvwNode">
            <summary>
            Tree/database node base class derived from the TreeNode. Does minimal work for
            the public interfaces but establishes the groundwork for the real sub classes. 
            Implements several internal workers that deal with multiple nodes/types (for copy,
            delete and related functions).
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.#ctor(System.String,OSIsoft.PISDK.Controls.MDBNodeTypes,OSIsoft.PISDK.Controls.MDBNodeImages,System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a new base tree node
            </summary>
            <param name="nodeName">Node name/text</param>
            <param name="type">Node type</param>
            <param name="imgIndex">Image to be used with the node</param>
            <param name="module">MDB object associated with the node</param>
            <param name="instData">Ref to instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.#ctor(System.String,OSIsoft.PISDK.Controls.MDBNodeTypes,OSIsoft.PISDK.Controls.MDBNodeImages,System.Object,System.Boolean,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a new base tree node
            </summary>
            <param name="nodeName">Node name/text</param>
            <param name="type">Node type</param>
            <param name="imgIndex">Image to be used with the node</param>
            <param name="module">MDB object associated with the node</param>
            <param name="dublicates">Allow dublicate dictionary entries</param>
            <param name="instData">Ref to instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.#ctor(System.String,OSIsoft.PISDK.Controls.MDBNodeTypes,OSIsoft.PISDK.Controls.MDBNodeImages,System.Object,System.Boolean,System.String,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a new base tree node
            </summary>
            <param name="nodeName">Node name/text</param>
            <param name="type">Node type</param>
            <param name="imgIndex">Image to be used with the node</param>
            <param name="module">MDB object associated with the node</param>
            <param name="dublicates">Allow dublicate dictionary entries</param>
            <param name="myUid">Predefined UID for this object</param>
            <param name="instData">Ref to instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.#ctor(System.String,OSIsoft.PISDK.Controls.MDBNodeTypes,System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a "disconnected" node for internal purposes. Can be used for temporary/transient
            objects,
            </summary>
            <param name="nodeName">Node name/text</param>
            <param name="type">Node type</param>
            <param name="module">MDB object associated with the node</param>
            <param name="instData">Ref to instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.reportError(System.Exception,System.String,System.String)">
            <summary>
            Generic error reporting method
            </summary>
            <param name="e">the exception take took place (if any)</param>
            <param name="className">class where the error occured</param>
            <param name="methodName">method where the erro occured</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.checkCOMException(System.Exception,System.Object,System.Boolean,System.String@)">
            <summary>
            Common and static utility that checks for "common" COM exceptions. These relate to
            errors like "server not defined", "Value deleted", "Tag Deleted" and so on. In some cases 
            a message box is shown to notify the user about a particular problem.
            NOTE: as of now, the messageboxes are disabled because SMT plugin shows them too. This
            may be a problem with other hosts?
            </summary>
            <param name="ex">The exception to examine</param>
            <param name="source">The object that created the exception</param>
            <param name="showMsgBoxes">Show message box if error matches a build-in criteria</param>
            <param name="cause">Cause of the error if any</param>
            <returns>true if error was handled/matches a build-in criteria</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.checkRemoteServerErrors(System.Object,System.Exception)">
            <summary>
            Generic utility that checks if error was caused by login failure and/or
            if the server is missing from the KST.
            </summary>
            <param name="source">The original exception</param>
            <param name="ex">The original exception</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.getMDBObject">
            <summary>
            get the actual database object
            </summary>
            <returns>the object</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.isLeafNode">
            <summary>
            See if this node has children to expand
            </summary>
            <returns>true if this module/node has no children in MDB</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.expand">
            <summary>
            Expand the node. see if this is the first expand and remove the extra child
            if so. Otherwise check if this node has a potentially stale database reference and
            refresh it if so. NOT OK - Should this be in the item (THE FLAG)?
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.setImage(System.Int32)">
            <summary>
            set or change the image of this instance
            </summary>
            <param name="imageIndex">image index, -1 restores the default</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.getUID(System.Boolean)">
            <summary>
            get unique ID for a tree node
            </summary>
            <param name="getFromObject">Get the real MDB UUID instead of internal ID</param>
            <returns>Module UID or synthezised UID (internal)</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.getName">
            <summary>
            Get my name, defaults to the visible label
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.getNodeType">
            <summary>
            Get the node type 
            </summary>
            <returns>the type</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.disconnectFromMDB">
            <summary>
            remove the MDB ref and dictionary entry
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.setMenuItems(System.Windows.Forms.ContextMenu,System.Collections.SortedList)">
            <summary>
            Enable/disable context menu items based on current setup
            </summary>
            <param name="nodeMenu">Menu</param>
            <param name="copyBuffer">Current copy buffer</param>
            <returns>the same menu for convenience</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.isValidDropTarget(System.Collections.SortedList)">
            <summary>
            is this node valid drop target
            </summary>
            <param name="copyBuffer">The current copy/drag bufer</param>
            <returns>0 if not valid, otherwise a positive number</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.modifyMenuItem(System.Windows.Forms.ContextMenu,System.Int32,System.Int32,System.String)">
            <summary>
            Modify a given menu item, i.e. add, disable, rename
            </summary>
            <returns>0 if operation ok-</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.makeNewNode(OSIsoft.PISDK.Controls.MDBNodeTypes)">
            <summary>
            Make a new subnode
            </summary>
            <param name="newType">node type to create</param>
            <returns>the newly created node</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.deleteMe(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            self destruct, i.e. remove the corresponding MDB structure.
            Base class will recursively delete all the child nodes by calling
            the deleteMe. The final step is to remove the tree structure (if there's
            anything left).
            </summary>
            <param name="deleteAction">The exact delete method</param>
            <returns>status of operation; 0 = ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.deleteFromMDB(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Method that removes all MDB references from this node and all the child nodes
            </summary>
            <param name="deleteAction">The delete action</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.deleteTree">
            <summary>
            Remove non-existing tree nodes from the tree view. Called from event handler
            when it detects that MDB item was removed.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.copyTo(System.Collections.SortedList,OSIsoft.PISDK.Controls.MDBModifyTypes,OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            copy/move
            </summary>
            <param name="source">The copy source object(list of actual objects)</param>
            <param name="copyAction">The copy type</param>
            <param name="sourceAction">Source selection: copy or cut</param>
            <returns>status; 0 = ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.moduleEdit(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Invoke edit dialog or equivalent. Base does nothing
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.updateNodes">
            <summary>
            Update tree node(s) to match the current MDB
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.setSelected(System.Boolean)">
            <summary>
            Set the multi-select state of this object;
            We don't touch the real state in the TreeNode...
            </summary>
            <param name="select">select/unselect</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.getSelected">
            <summary>
            return the selected state of this node. This can be the actual TreeNode state or
            the multi-select one
            </summary>
            <returns>Selected state</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.getNameAndPersistenceStrings(System.String@,System.String@,System.String@)">
            <summary>
            Returns (appended to the inputs) MDB object name, full pathname and persistence string
            </summary>
            <param name="names">refrence to the names string</param>
            <param name="paths">reference to the full pathnames string</param>
            <param name="persists">reference to the persistence strings</param>
            <returns>true (ok) for now</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.isWriteable">
            <summary>
            Is this node writable at this moment?
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.deleteBranch(PISDK.PIModule,System.Boolean,System.String)">
            <summary>
            Delete a brach of tree correctly (from the database, not the visual control).
            This is only used to delete everything below a given module but not the
            module itself. Can be applied to a single "value" of a module too.
            </summary>
            <param name="module">PIModule whose children are to be deleted</param>
            <param name="thisValueOnly">Only this (current) value</param>
            <param name="modulePath">Pathname of this module</param>
            <returns>Error code or 0 if ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.copyBranch(System.Object,PISDK.PIModule,OSIsoft.PISDK.Controls.MDBModifyTypes,System.Boolean,System.String,System.Boolean)">
            <summary>
            Copy a module and optionally the whole branch. A shallow copy includes aliases and properties
            This is recursive function in case the whole branch should be copied.
            This is the top level method of a long chain of worker methods that deal with different types
            of objects/data. There are two reason why the code is in the base:
            - The methods are recursive and it is likely that the tree nodes for the children don't
            exists anywhere, we would need to create temp nodes for them and that would be a performance hit.
            - The overall functionality deals with all possible node types and it would be difficult 
            to dispatch the calls even if the tree nodes did exists.
            Some of the workers here are internal/public because they offer usefull functionality that
            can be used from other internal classes.
            (Still, there seems to be a design flaw....)
            </summary>
            <param name="parent">Parent module for the new object</param>
            <param name="source">Source module to add</param>
            <param name="copyAction">Copy options: simple, values, tree,etc.</param>
            <param name="isTopLevel">Is the source top level node, i.e. one that was selected for copy</param>
            <param name="parentPath">path of the target node/parent</param>
            <param name="isParent">Are we dublicating ("Copy here..") a module</param>
            <returns>0 = OK, 1 = Overwrite was not allowed, less than 0 = real error</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.copyAModule(System.Object,PISDK.PIModule,PISDK.PIModuleList,System.String,OSIsoft.PISDK.Controls.MDBModifyTypes,System.Boolean,System.Boolean,System.Boolean,PISDK.PIModule@)">
            <summary>
            copy a module and optionally the whole branch. A shallow copy includes aliases and properties
            This is recursive function in case the whole brach should be copied
            </summary>
            <param name="parent">Copy target, parent that owns the collection into which to add the source</param>
            <param name="source">Source module to add</param>
            <param name="sourceList">Copy of the original childlist</param>
            <param name="parentPath">path of the target node/parent</param>
            <param name="copyAction">Copy options: simple, values, tree,etc.</param>
            <param name="addToParent">Add the module to parent list or create new value?</param>
            <param name="isTopLevel">Was this an original copy module (one selected for copy)</param>
            <param name="isParent">Are we dublicating ("Copy here..") a module</param>
            <param name="newParent">The newly created module that will be a "parent" for its Values later</param>
            <returns>0 = OK, 1 = Overwrite was not allowed, less than 0 = real error</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.copyModuleData(PISDK.PIModule,PISDK.PIModule,PISDK.PIModuleList,OSIsoft.PISDK.Controls.MDBModifyTypes,System.String)">
            <summary>
            Internally exposed method to copy module data from source to destination. This can
            be used internally to fill in module data and recursively copy the branch for this
            source module value.
            </summary>
            <param name="newMod">Copy destination module</param>
            <param name="source">Copy source module</param>
            <param name="sourceChildren">Copy of the original childlist</param>
            <param name="copyAction">Type of copy</param>
            <param name="parentPath">The pathname of the destination module</param>
            <returns>0 if OK</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.copyAliases(PISDK.PIModule,PISDK.PIAliases,System.String)">
            <summary>
            copy all aliases from source collection to target collection
            </summary>
            <param name="targetList">Copy target module/collection</param>
            <param name="sourceList">Source collection</param>
            <param name="parentPath">path of the target node/parent</param>
            <returns>0 = OK, 1 = Overwrite was not allowed, less than 0 = real error</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.copyAnAlias(PISDK.PIModule,PISDK.PIAlias,System.String,System.Boolean)">
            <summary>
            copy a single alias to target collection
            </summary>
            <param name="targetList">Copy target module</param>
            <param name="alias">alias, source</param>
            <param name="parentPath">path of the target node/parent</param>
            <param name="isParent">Dublicating myself, ie. "Copy Of..."</param>
            <returns>0 = OK, 1 = Overwrite was not allowed, less than 0 = real error</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.copyProperties(PISDK.PIProperties,PISDK.PIProperties,System.String)">
            <summary>
            copy all properties from source collection to target collection. This is a recursive operation.
            </summary>
            <param name="targetList">Copy target collection</param>
            <param name="sourceList">Source collection</param>
            <param name="parentPath">path of the target node/parent</param>
            <returns>0 = OK, 1 = Overwrite was not allowed, less than 0 = real error</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.copyAProperty(PISDK.PIProperties,PISDK.PIProperty,System.Boolean,System.String,System.Boolean)">
            <summary>
            copy a single property to target collection
            </summary>
            <param name="targetList">Copy target collection</param>
            <param name="prop">Property, source</param>
            <param name="copyAll">Copy child properties also</param>
            <param name="parentPath">path of the target node/parent</param>
            <param name="isParent">Dublicating myself, ie. "Copy Of..."</param>
            <returns>0 = OK, 1 = Overwrite was not allowed, less than 0 = real error</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.copyHeadings(PISDK.PIHeadings,PISDK.PIHeadings,System.String)">
            <summary>
            copy all headings from source collection to target collection. This is a recursive operation.
            </summary>
            <param name="targetList">Copy target collection</param>
            <param name="sourceList">Source collection</param>
            <param name="parentPath">path of the target node/parent</param>
            <returns>0 = OK, 1 = Overwrite was not allowed, less than 0 = real error</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.copyAHeading(PISDK.PIHeadings,PISDK.PIHeading,System.Collections.SortedList,System.String,System.Boolean)">
            <summary>
            copy a single Headings to target collection
            </summary>
            <param name="targetList">Copy target collection</param>
            <param name="head">Heading, source</param>
            <param name="reservedLevels">List of reserverd heading levels</param>
            <param name="parentPath">path of the target node/parent</param>
            <param name="isParent">Dublicating myself? Change the name to "copy of..."</param>
            <returns>0 = OK, 1 = Overwrite was not allowed, less than 0 = real error</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.setMDBPathForNode(System.String)">
            <summary>
            Internal helper that sets the fullpath for disconnected nodes used
            when they are used in clipboard operations (copy, dragdrop). This is
            for internal use only.
            Also used to reset the strin g after rename
            </summary>
            <param name="fullPathName"></param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.setPersistenceStr(System.String)">
            <summary>
            Internal helper that sets the fullpath for disconnected nodes used
            when they are used in clipboard operations (copy, dragdrop). This is
            for internal use only.
            Also used to reset the strin g after rename
            </summary>
            <param name="persistStr"></param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.isThisValidCopyNode(OSIsoft.PISDK.Controls.TvwNode,OSIsoft.PISDK.Controls.TvwNode)">
            <summary>
            Internal method to check if a given node has a parent/child relationship with  the
            reference node. This is used to validate drag/drop and copy targets, i.e. make sure
            that we have no circular references.
            </summary>
            <param name="refNode">The potential parent (reference) node</param>
            <param name="node">the potential child</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.TvwNode.updateMDBValueRef(System.Object)">
            <summary>
            Try to update the MDB object reference because the Value/version has changed due to query date change
            </summary>
            <param name="newValue">The new reference</param>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.PersistenceString">
            <summary>
            Returns the persistence string if present, otherwise an empty string
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.FullPathName">
            <summary>
            Returns the full MDB pathname if present, otherwise an empty string. 
            The generic pathname format is: \\server\module1\module2...
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.ItemName">
            <summary>
            Returns the name of this object
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.ModuleType">
            <summary>
            Returns the type of this object
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.ModuleRef">
            <summary>
            Returns the MDB object reference of this node object
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.UniqueID">
            <summary>
            Returns the unique ID for a module, otherwise an empty string
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.Image">
            <summary>
            Sets/gets the image (index) for this object
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.Selected">
            <summary>
            gets/sets the "selected" state of this node
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.CheckedState">
            <summary>
            gets/sets the "Checked" state of this node
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.EnabledState">
            <summary>
            Gets or sets the "Enabled/grayed out" state of this node
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.MDBObject">
            <summary>
            Returns the MDB object/reference of this node object. This may or may not be
            the stored sdkModule, some container classes return something different
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.MyServer">
            <summary>
            Returns the PIServer object for this node
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.IsCollapsed">
            <summary>
            Sets or gets the collapsed status of the node. This is used along with the RefreshPending flag
            to synchronize the view against the database when the node expands. This flag is true when
            a populated node is collapsed (or when it has a dummy element)
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.RefreshPending">
            <summary>
            Sets or gets the "stale" status of this node. The database reference is considered to be
            stale if this node was collapse/invisible (but already populated) during a database refresh.
            This flag is used for performance, we do not want to refresh invisible nodes. This flag
            is checked when the node expands, the reference is refreshed if needed.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.TreeInstData">
            <summary>
            Returns the instance data object for the currecnt tree control instance
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.TvwNode.MenuIsDisabled">
            <summary>
            Sets/gets the value that determines if the menu is disabled. This is somewhat tricky
            because we need to set this at "instance/type" level. The actual storage is in the
            "base" instance that lives inside the TreeInstanceData but here we don't easily know
            which instance was called (Am I base or not?)
            </summary>	
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.#ctor(System.String,System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a new Node for a PIModule. This constructor uses PIModule defaults for 
            internal values (image etc.)
            </summary>
            <param name="name">Node name</param>
            <param name="module">Reference to PIModule</param>
            <param name="instData">Ref to instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.#ctor(System.String,OSIsoft.PISDK.Controls.MDBNodeTypes,OSIsoft.PISDK.Controls.MDBNodeImages,System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a new Module Node for PIModule
            </summary>
            <param name="nodeName">Node name</param>
            <param name="type">Node type</param>
            <param name="imgIndex">Image index</param>
            <param name="module">Reference to DB object (PIMOdule)</param>
            <param name="instData">Ref to instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.#ctor(System.String,OSIsoft.PISDK.Controls.MDBNodeTypes,OSIsoft.PISDK.Controls.MDBNodeImages,System.Object,System.String,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a new Module Node for PIModule
            </summary>
            <param name="nodeName">Node name</param>
            <param name="type">Node type</param>
            <param name="imgIndex">Image index</param>
            <param name="module">Reference to DB object (PIMOdule)</param>
            <param name="myUid">Predefined UID for the object</param>
            <param name="instData">Ref to instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.#ctor(System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a disconnected ModuleNode that can only be used for temporary/transient
            purposes (like drag/drop data buffers etc.)
            </summary>
            <param name="module"></param>
            <param name="instData">Ref to instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.getUID(System.Boolean)">
            <summary>
            get unique ID for a tree node
            </summary>
            <param name="getFromObject">Get the true UUID form MDB object</param>
            <returns>Node UID, either from MDB object or internal </returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.expand">
            <summary>
            Node is expanding. If node is not populated then do it now, i.e. expand
            sub-modules, properties and aliases.
            NOTE: This method may create a background thread to update the tree and the
            thread remains running after the method returns. In fact, there can be multiple
            threads active since they are tied to an instance of this class.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.setMenuItems(System.Windows.Forms.ContextMenu,System.Collections.SortedList)">
            <summary>
            Enable/disable context menu items based on current setup
            </summary>
            <param name="nodeMenu">Menu</param>
            <param name="copyBuffer">current copy buffer</param>
            <returns>the same menu for convenience</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.getDisabledItemArray(System.Int32)">
            <summary>
            Returns the disabled menu item array, i.e. items that are "permanently" disabled
            </summary>
            <param name="mnuIndex">item index of the menu (relative to main menu)</param>
            <returns>An array of disabled statuses</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.isValidDropTarget(System.Collections.SortedList)">
            <summary>
            is this node valid drop target
            </summary>
            <param name="copyBuffer">The current copy/drag bufer</param>
            <returns>0 if not valid, 1 if valid, 2 if valid for shallow copy</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.isWriteable">
            <summary>
            Is this node writable at this moment?
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.makeNewNode(OSIsoft.PISDK.Controls.MDBNodeTypes)">
            <summary>
            Make a new subnode and invoke edit dialog to set it up. This interface handles multiple
            "node types" because the context menu for the module contains multiple items/types for
            for new (module/alias/property..).
            </summary>
            <param name="newType">node type to create</param>
            <returns>the newly created node</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.moduleEdit(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Invoke edit dialog for real edit. Rename the MDB node if the action is rename.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.deleteMe(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Deletes this tree branch or a link. This is used to remove the PIModule and all its
            sub-nodes from the MDB itself. The delete can be limited to the current value only.
            This can also be used to delete links, which just simply removes this module from parent's
            childlist.
            </summary>
            <param name="deleteAction">The exact delete method</param>
            <returns>status of operation; 0 = ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.copyTo(System.Collections.SortedList,OSIsoft.PISDK.Controls.MDBModifyTypes,OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            copy/move function. The input objects are copied here and the depth of the copy depends on
            the input action, i.e. copy only the source object(s) and optionally the whole hieracrhy below.
            In case of a move the source modules are deleted along with their children.
            </summary>
            <param name="source">current copy source</param>
            <param name="copyAction">The copy type</param>
            <param name="sourceAction">Source selection: copy or cut</param>
            <returns>status; 0 = ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.updateNodes">
            <summary>
            Scan thru the MDB and check that all module children are up to date
            This is called when the view is refreshed or needs to be refreshed.
            Also make sure that the aliases and properties are uo to date.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.updateModules(PISDK.PIModules)">
            <summary>
            Class specific tree update routine. Used internally, called by this and
            derived (maybe?) classes.
            </summary>
            <param name="modules"></param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.updateDataNodes">
            <summary>
            Scan thru the MDB and check aliases/properties nodes, i.e. if we need 
            to insert them
            This is called by the event handler when we actively monitor changes in DB
            or from tree refresh.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.isLinkedModule">
            <summary>
            Module specific helper function that determines if this module is linked
            </summary>
            <returns>true if module is linked</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.isLinkedModule(PISDK.PIModule)">
            <summary>
            Module specific helper function that determines if a given PIModule is linked
            </summary>
            <returns>true if module is linked</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.getImageForThisNode">
            <summary>
            Determines/computes the image index for this node. The index is affected by: is this a unit,
            is this linked and has this multiple values
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleNode.updateMDBValueRef(System.Object)">
            <summary>
            Try to update the PIModule reference because the Value/version has changed due to query date change
            </summary>
            <param name="newValue">The new reference</param>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.ModuleNode.MyServer">
            <summary>
            Returns the PIServer object for this node
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.ModulesNode">
            <summary>
            Class that represents the top level of the MODULE hierarchy, i.e. the PIModules
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModulesNode.#ctor(System.String,System.Object,System.String,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a node for the top level PIModules collection
            </summary>
            <param name="nodeName">name of the tree node (Modules)</param>
            <param name="module">The top level MDB module collection</param>
            <param name="serverName">Name of the server, used in UID</param>
            <param name="instData">Ref to instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModulesNode.getMDBObject">
            <summary>
            get the MDB object that we want to expose. The object that we have is PIModuleDB
            but we want to expose the top level module list, i.e. PIModuleDB.PIModules.
            We can't store a ref to the list because it will be stale against "external" changes.
            </summary>
            <returns>the object</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModulesNode.getUID(System.Boolean)">
            <summary>
            get unique ID for a tree node
            </summary>
            <param name="getFromObject">Get the true UUID form MDB object</param>
            <returns>Node UID, either from MDB object or internal </returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModulesNode.deleteMe(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Delete me from the parent's aliases
            </summary>
            <returns>-1 - not implemented</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModulesNode.setMenuItems(System.Windows.Forms.ContextMenu,System.Collections.SortedList)">
            <summary>
            Enable/disable context menu items based on current setup
            </summary>
            <param name="nodeMenu">Menu</param>
            <param name="copyBuffer">Current copy buffer</param>
            <returns>the same menu for convenience</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModulesNode.isValidDropTarget(System.Collections.SortedList)">
            <summary>
            is this node valid drop target
            </summary>
            <param name="copyBuffer">The current copy/drag bufer</param>
            <returns>0 if not valid, 1 if valid, 2 if valid for shallow copy</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModulesNode.isWriteable">
            <summary>
            Is this node writable at this moment?
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModulesNode.copyTo(System.Collections.SortedList,OSIsoft.PISDK.Controls.MDBModifyTypes,OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            copy/move function. The input objects are copied here and the depth of the copy depends on
            the input action, i.e. copy only the source object(s) and optionally the whole hieracrhy below.
            In case of a move the source modules are deleted along with their children.
            </summary>
            <param name="source">Current copy source</param>
            <param name="copyAction">The copy type</param>
            <param name="sourceAction">Source selection: copy or cut</param>
            <returns>status; 0 = ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModulesNode.updateNodes">
            <summary>
            Scan thru the MDB and check that all children match the MDB
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModulesNode.getNameAndPersistenceStrings(System.String@,System.String@,System.String@)">
            <summary>
            Returns (appended to the inputs) MDB object name, full pathname and persistence string
            </summary>
            <param name="names">refrence to the names string</param>
            <param name="paths">reference to the full pathnames string</param>
            <param name="persists">reference to the persistence strings</param>
            <returns>true (ok) for now</returns>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.ModulesNode.MyServer">
            <summary>
            Returns the PIServer object for this node
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.DBNode">
            <summary>
            Class that represent the top level of the hierarchy, i.e. the server
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.DBNode.#ctor(System.String,System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Create a new DBNode instance
            </summary>
            <param name="nodeName"></param>
            <param name="module"></param>
            <param name="instData"></param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.DBNode.expand">
            <summary>
            Node is expanding. Populate me if this is the first expand. NOTE: this is
            equivalent to base.expand but the base only deals with "modules" and this
            expands Modules collection and or HeadingSets only
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.DBNode.updateNodes">
            <summary>
            Scan thru the MDB and check that all children match the MDB. Mainly add/remove 
            headingsets
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.DBNode.getUID(System.Boolean)">
            <summary>
            get unique ID for an alias, this is synthesized
            </summary>
            <param name="getFromObject">Get the true UUID form MDB object</param>
            <returns>Node UID, either from MDB object or internal </returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.DBNode.setMenuItems(System.Windows.Forms.ContextMenu,System.Collections.SortedList)">
            <summary>
            Enable/disable context menu items based on current setup
            </summary>
            <param name="nodeMenu">Menu</param>
            <param name="copyBuffer">Current copy buffer</param>
            <returns>the same menu for convenience</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.DBNode.updateServerIcon">
            <summary>
            Utility that can be used from error detection/recovery methods
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.DBNode.MyServer">
            <summary>
            Returns the PIServer object for this node
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.Alias">
            <summary>
            Class that represent an alias
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Alias.#ctor(System.String,System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a new Alias node that reflects the PIAlias in the MDB
            </summary>
            <param name="nodeName">Alias name</param>
            <param name="module">Reference to the PIAlias object</param>
            <param name="instData">Ref to instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Alias.#ctor(System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a new Alias node that reflects the PIAlias in the MDB.
            This constructor can be used to create "dummy" object that are
            not totally intialized and not inserted into UID table etc. This
            can be usefull during transient operations like drag/drop but
            user should be very carefull when usign this feature.
            </summary>
            <param name="tempObject">Reference to the PIAlias object</param>
            <param name="instData">Ref to instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Alias.getUID(System.Boolean)">
            <summary>
            get unique ID for an alias, this is synthesized.
            Note that this is normally called from the base construct and at that time
            the text is the actual name of the alias. This text may later change but
            the guid has been already generated. 
            </summary>
            <param name="getFromObject">Get the true UUID form MDB object</param>
            <returns>Node UID, either from MDB object or internal </returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Alias.deleteMe(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Delete me from the parent's aliases. Note that the parent can be deleted too if this node
            is the only/last node in the collection.
            </summary>
            <returns>0 if ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Alias.deleteFromMDB(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Method that removes all MDB references from this node and all the child nodes
            </summary>
            <param name="deleteAction">The delete action</param>
            <returns>0</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Alias.moduleEdit(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Property edit. Either rename or invoke the edit dialog
            </summary>
            <param name="editAction"></param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Alias.setMenuItems(System.Windows.Forms.ContextMenu,System.Collections.SortedList)">
            <summary>
            Enable/disable context menu items based on current setup
            NOTE: Alias shares the menu with PIHEADING
            </summary>
            <param name="nodeMenu">Menu</param>
            <param name="copyBuffer">Current copy buffer</param>
            <returns>the same menu for convenience</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Alias.isWriteable">
            <summary>
            Is this node writable at this moment?
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Alias.updateNodes">
            <summary>
            Scan thru the MDB and check that aliases match the tree (me)
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.Alias.MyServer">
            <summary>
            Returns the PIServer object for this node
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.Aliases">
            <summary>
            Class that represent an alias list
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Aliases.#ctor(System.String,System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Create a new Aliases instances
            </summary>
            <param name="nodeName">Node name</param>
            <param name="module">Ref to owner PIModule</param>
            <param name="instData">tree instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Aliases.#ctor(System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a disconnected aliases node for use in drag and drop and copy/paste
            operations when data is copied to or from clipboard
            </summary>
            <param name="module"></param>
            <param name="instData">Ref to instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Aliases.getMDBObject">
            <summary>
            get the MDB object that we want to expose. The object that we have is PIModule
            but we want to expose the PIAliases list.
            </summary>
            <returns>the object</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Aliases.getUID(System.Boolean)">
            <summary>
            get unique ID for aliase, this is combination of parents and property name
            </summary>
            <param name="getFromObject">Get the true UUID form MDB object</param>
            <returns>Node UID, either from MDB object or internal </returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Aliases.setMenuItems(System.Windows.Forms.ContextMenu,System.Collections.SortedList)">
            <summary>
            Enable/disable context menu items based on current setup
            </summary>
            <param name="nodeMenu">Menu</param>
            <param name="copyBuffer">Current copy buffer</param>
            <returns>the same menu for convenience</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Aliases.isWriteable">
            <summary>
            Is this node writable at this moment?
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Aliases.copyTo(System.Collections.SortedList,OSIsoft.PISDK.Controls.MDBModifyTypes,OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            copy/move function. The input objects are copied here.
            In case of a move the source modules are deleted..
            </summary>
            <param name="source">Current copy source</param>
            <param name="copyAction">The copy type</param>
            <param name="sourceAction">Source selection: copy or cut</param>
            <returns>status; 0 = ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Aliases.isValidDropTarget(System.Collections.SortedList)">
            <summary>
            is this node valid drop target
            </summary>
            <param name="copyBuffer">The current copy/drag bufer</param>
            <returns>1 if valid , 2 if valid gor shallow copy , 0 if not valid</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Aliases.makeNewNode(OSIsoft.PISDK.Controls.MDBNodeTypes)">
            <summary>
            Make a new subnode
            </summary>
            <param name="newType">node type to create</param>
            <returns>the newly created node</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Aliases.deleteFromMDB(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Method that removes all MDB references from this node and all the child nodes
            </summary>
            <param name="deleteAction">The delete action</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Aliases.updateNodes">
            <summary>
            Scan thru the MDB and check that aliases match the tree (me). Delete tree nodes that don't exist
            and add any new one found
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Aliases.getNameAndPersistenceStrings(System.String@,System.String@,System.String@)">
            <summary>
            Returns (appended to the inputs) MDB object name, full pathname and persistence string
            </summary>
            <param name="names">refrence to the names string</param>
            <param name="paths">reference to the full pathnames string</param>
            <param name="persists">reference to the persistence strings</param>
            <returns>true (ok) for now</returns>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.Aliases.MyServer">
            <summary>
            Returns the PIServer object for this node
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.Property">
            <summary>
            Class that represent a name/value pair (like a property)
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.#ctor(System.String,System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates  a property from name and MDB module reference
            </summary>
            <param name="nodeName">Node name</param>
            <param name="module">MDB module</param>
            <param name="instData">tree instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.#ctor(System.String,OSIsoft.PISDK.Controls.MDBNodeTypes,OSIsoft.PISDK.Controls.MDBNodeImages,System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a new property for derived classes. This is not to be used
            from outside.
            </summary>
            <param name="nodeName">Node name/text</param>
            <param name="type">Node type</param>
            <param name="imgIndex">Image to be used with the node</param>
            <param name="module">MDB object associated with the node</param>
            <param name="instData">tree instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.#ctor(System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a new Property node that reflects the PIProperty in the MDB.
            This constructor can be used to create "dummy" object that are
            not totally intialized and not inserted into UID table etc. This
            can be usefull during transient operations like drag/drop but
            user should be very carefull when usign this feature.
            </summary>
            <param name="tempObject">Reference to the Property object</param>
            <param name="instData">tree instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.#ctor(System.String,OSIsoft.PISDK.Controls.MDBNodeTypes,System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a new Property node that reflects the PIProperty in the MDB.
            This constructor can be used to create "dummy" object that are
            not totally intialized and not inserted into UID table etc. This
            can be usefull during transient operations like drag/drop but
            user should be very carefull when usign this feature.
            </summary>
            <param name="name">Reference to the Property object</param>
            <param name="type">object type</param>
            <param name="tempObject">refrence to MDB object</param>
            <param name="instData">tree instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.getUID(System.Boolean)">
            <summary>
            get unique ID for a property, this is combination of parents and property name
            Note that this is normally called from the base construct and at that time
            the text is the actual name of the property. This text may later change but
            the guid has been already generated. 
            </summary>
            <param name="getFromObject">Get the true UUID form MDB object</param>
            <returns>Node UID, either from MDB object or internal </returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.expand">
            <summary>
            Expand the proporties of this property. This should be called only if at
            least one child property exists.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.nodeExpand(PISDK.PIProperties)">
            <summary>
            Worker that expand the properties collections for base property and derived proprety classes
            </summary>
            <param name="properties">MDB property collection</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.setMenuItems(System.Windows.Forms.ContextMenu,System.Collections.SortedList)">
            <summary>
            Enable/disable context menu items based on current setup
            </summary>
            <param name="nodeMenu">Menu</param>
            <param name="copyBuffer">Current copy buffer</param>
            <returns>the same menu for convenience</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.isWriteable">
            <summary>
            Is this node writable at this moment?
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.isValidDropTarget(System.Collections.SortedList)">
            <summary>
            is this node valid drop target
            </summary>
            <param name="copyBuffer">The current copy/drag bufer</param>
            <returns>true if valid target</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.checkIfSourceValid(System.Collections.SortedList)">
            <summary>
            Worker that checks if the copybuffer is valid for me
            </summary>
            <returns>true if valid</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.makeNewNode(OSIsoft.PISDK.Controls.MDBNodeTypes)">
            <summary>
            Make a new subnode
            </summary>
            <param name="newType">node type to create</param>
            <returns>the newly created node</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.moduleEdit(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Property edit. Either rename or invoke the edit dialog
            </summary>
            <param name="editAction"></param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.deleteMe(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Deletes this tree branch. This is used to remove item from the MDB itself.
            Currently this will not remove the tree nodes because that will happen later
            based on events (see deleteTree). 
            </summary>
            <param name="deleteAction">The exact delete method</param>
            <returns>status of operation; 0 = ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.deleteFromMDB(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Method that removes all MDB references from this node and all the child nodes
            </summary>
            <param name="deleteAction">The delete action</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.copyTo(System.Collections.SortedList,OSIsoft.PISDK.Controls.MDBModifyTypes,OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            copy/move function. The input objects are copied here 
            In case of a move the source modules are deleted.
            </summary>
            <param name="source">Current copy source</param>
            <param name="copyAction">The copy type</param>
            <param name="sourceAction">Source selection: copy or cut</param>
            <returns>status; 0 = ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Property.updateNodes">
            <summary>
            Scan thru the MDB and check that properties match the tree (me)
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.Property.MyServer">
            <summary>
            Returns the PIServer object for this node
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.Properties">
            <summary>
            Class that represent properties collection for a module
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Properties.#ctor(System.String,System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a new Properties node from name and MDB object. Calls base to initialize
            this object.
            </summary>
            <param name="nodeName"></param>
            <param name="module"></param>
            <param name="instData">tree instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Properties.#ctor(System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a new Property node that reflects the PIProperty in the MDB.
            This constructor can be used to create "dummy" object that are
            not totally intialized and not inserted into UID table etc. This
            can be usefull during transient operations like drag/drop but
            user should be very carefull when usign this feature.
            </summary>
            <param name="tempObject">Reference to the PIAlias object</param>
            <param name="instData">tree instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Properties.getMDBObject">
            <summary>
            get the MDB object that we want to expose. The object that we have is PIModule
            but we want to expose the PIProperties list.
            We can't store a ref to the list because it will be stale against "external" changes.
            </summary>
            <returns>the object</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Properties.getUID(System.Boolean)">
            <summary>
            get unique ID for a property, this is combination of parents and property name
            </summary>
            <param name="getFromObject">Get the true UUID form MDB object</param>
            <returns>Node UID, either from MDB object or internal </returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Properties.expand">
            <summary>
            Node is expanding. Populate me if this is the first expand. This method is
            will get called ONLY if a module has properties, this node doean't exist without
            child properties.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Properties.setMenuItems(System.Windows.Forms.ContextMenu,System.Collections.SortedList)">
            <summary>
            Enable/disable context menu items based on current setup
            </summary>
            <param name="nodeMenu">Menu</param>
            <param name="copyBuffer">Current copy buffer</param>
            <returns>the same menu for convenience</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Properties.isWriteable">
            <summary>
            Is this node writable at this moment?
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Properties.deleteFromMDB(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Method that removes all MDB references from this node and all the child nodes
            </summary>
            <param name="deleteAction">The delete action</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Properties.updateNodes">
            <summary>
            Scan thru the MDB and check that properties match the tree (me).
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Properties.getNameAndPersistenceStrings(System.String@,System.String@,System.String@)">
            <summary>
            Returns (appended to the inputs) MDB object name, full pathname and persistence string
            </summary>
            <param name="names">refrence to the names string</param>
            <param name="paths">reference to the full pathnames string</param>
            <param name="persists">reference to the persistence strings</param>
            <returns>true (ok) for now</returns>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.Properties.MyServer">
            <summary>
            Returns the PIServer object for this node
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.Heading">
            <summary>
            Class that represent the third level of the Heading hierarchy, i.e. the PIHeading
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Heading.#ctor(System.String,System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a new Heading object for PIHeading
            </summary>
            <param name="nodeName">Name of the node</param>
            <param name="module">Reference to PIHeading object</param>
            <param name="instData">Reference to tree instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Heading.#ctor(System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a disconnected Heading object for temporary/transient objects used in
            funxtions such as drag/drop.
            </summary>
            <param name="module"></param>
            <param name="instData">Reference to tree instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Heading.getUID(System.Boolean)">
            <summary>
            get unique ID for aliases, this is combination of parent module UID and "aliases"
            </summary>
            <param name="getFromObject">Get the true UUID form MDB object</param>
            <returns>Node UID, either from MDB object or internal </returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Heading.setMenuItems(System.Windows.Forms.ContextMenu,System.Collections.SortedList)">
            <summary>
            Enable/disable context menu items based on current setup.
            NOTE: PIHeading shares the menu with PIALIAS
            </summary>
            <param name="nodeMenu">Menu</param>
            <param name="copyBuffer">Current copy buffer</param>
            <returns>the same menu for convenience</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Heading.isWriteable">
            <summary>
            Is this node writable at this moment?
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Heading.moduleEdit(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Headingset edit (rename). Only rename is valid
            </summary>
            <param name="editAction">Rename or real edit</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Heading.deleteFromMDB(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Method that removes all MDB references from this node and all the child nodes
            </summary>
            <param name="deleteAction">The delete action</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.Heading.updateNodes">
            <summary>
            Scan thru the MDB and check that properties match the tree (me)
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.Heading.MyServer">
            <summary>
            Returns the PIServer object for this node
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.HeadingSet">
            <summary>
            Class that represent the second level of the Heading hierarchy, i.e. the PIHeadingSet
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSet.#ctor(System.String,System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Create a new HeadingSet node for PIHeadingSet
            </summary>
            <param name="nodeName">Name of the set</param>
            <param name="module">Reference to PIHeadingSet</param>
            <param name="instData">Reference to tree instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSet.#ctor(System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a disconnected Heading object for temporary/transient objects used in
            funxtions such as drag/drop.
            </summary>
            <param name="module"></param>
            <param name="instData">Reference to tree instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSet.getUID(System.Boolean)">
            <summary>
            get unique ID for aliases, this is combination of parent module UID and "aliases"
            </summary>
            <param name="getFromObject">Get the true UUID form MDB object</param>
            <returns>Node UID, either from MDB object or internal </returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSet.setMenuItems(System.Windows.Forms.ContextMenu,System.Collections.SortedList)">
            <summary>
            Enable/disable context menu items based on current setup
            </summary>
            <param name="nodeMenu">Menu</param>
            <param name="copyBuffer">Current copy buffer</param>
            <returns>the same menu for convenience</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSet.isWriteable">
            <summary>
            Is this node writable at this moment?
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSet.makeNewNode(OSIsoft.PISDK.Controls.MDBNodeTypes)">
            <summary>
            Make a new subnode
            </summary>
            <param name="newType">node type to create</param>
            <returns>the newly created node</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSet.moduleEdit(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Headingset edit (rename). Only rename is valid
            </summary>
            <param name="editAction">Rename or real edit</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSet.deleteFromMDB(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Method that removes all MDB references from this node and all the child nodes
            </summary>
            <param name="deleteAction">The delete action</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSet.copyTo(System.Collections.SortedList,OSIsoft.PISDK.Controls.MDBModifyTypes,OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            copy/move function. Copy all sources (Sets or Headings).
            </summary>
            <param name="source">Current copy source</param>
            <param name="copyAction">The copy type</param>
            <param name="sourceAction">Source selection: copy or cut</param>
            <returns>status; 0 = ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSet.isValidDropTarget(System.Collections.SortedList)">
            <summary>
            is this node valid drop target
            </summary>
            <param name="copyBuffer">The current copy/drag bufer</param>
            <returns>0 if not valid, 1 if valid</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSet.updateNodes">
            <summary>
            Scan thru the MDB and check that properties match the tree (me)
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.HeadingSet.MyServer">
            <summary>
            Returns the PIServer object for this node
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.HeadingSets">
            <summary>
            Class that represent the top level of the Heading hierarchy, i.e. the PIHeadingSets
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSets.#ctor(System.String,System.Object,OSIsoft.PISDK.Controls.TreeInstanceData)">
            <summary>
            Creates a new HeadinsSets node for the database.PIHeadingSets collection
            </summary>
            <param name="nodeName">name of the set (Headings)</param>
            <param name="module">Reference to the HeadinsSets collection</param>
            <param name="instData">Reference to tree instance data</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSets.makeNewNode(OSIsoft.PISDK.Controls.MDBNodeTypes)">
            <summary>
            Make a new subnode
            </summary>
            <param name="newType">node type to create</param>
            <returns>the newly created node</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSets.setMenuItems(System.Windows.Forms.ContextMenu,System.Collections.SortedList)">
            <summary>
            Enable/disable context menu items based on current setup
            </summary>
            <param name="nodeMenu">Menu</param>
            <param name="copyBuffer">Current copy buffer</param>
            <returns>the same menu for convenience</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSets.isWriteable">
            <summary>
            Is this node writable at this moment?
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSets.getNameAndPersistenceStrings(System.String@,System.String@,System.String@)">
            <summary>
            Returns (appended to the inputs) MDB object name, full pathname and persistence string
            </summary>
            <param name="names">refrence to the names string</param>
            <param name="paths">reference to the full pathnames string</param>
            <param name="persists">reference to the persistence strings</param>
            <returns>true (ok) for now</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSets.copyTo(System.Collections.SortedList,OSIsoft.PISDK.Controls.MDBModifyTypes,OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            copy/move function. The input objects are copied here and the depth of the copy depends on
            the input action, i.e. copy only the source object(s) and optionally the whole hieracrhy below.
            In case of a move the source modules are deleted along with their children.
            </summary>
            <param name="source">Current copy source</param>
            <param name="copyAction">The copy type</param>
            <param name="sourceAction">Source selection: copy or cut</param>
            <returns>status; 0 = ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSets.isValidDropTarget(System.Collections.SortedList)">
            <summary>
            is this node valid drop target
            </summary>
            <param name="copyBuffer">The current copy/drag bufer</param>
            <returns>1 if valid target 0 if not</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.HeadingSets.updateNodes">
            <summary>
            Scan thru the MDB and check that properties match the tree (me)
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.HeadingSets.MyServer">
            <summary>
            Returns the PIServer object for this node
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.ModuleCollection">
            <summary>
            Class that implements a simple collection of key/value pairs.
            This is a shallow implementation on top of a SortedList
            This is used to find a tree node based on module's uniqueID on an
            event and similar.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleCollection.#ctor">
            <summary>
            Creates a new ModuleCollection
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleCollection.freeResources">
            <summary>
            Utility method to make sure that the list gets cleared..should happen anyway
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleCollection.add(System.Object,OSIsoft.PISDK.Controls.ITvwNode,System.Boolean)">
            <summary>
            Add a node into the list, use the unique ID of the node as a key.
            If the ID isn't found then a new item for this reference is created.
            If the item was found and dublicates are allowed (most case), then the
            item/UID is added to the current reference object. A reference to the existing
            MDB object is returned (if no was found)
            </summary>
            <param name="mdbReference">Orginal MDB reference</param>
            <param name="node">Tree node to insert</param>
            <param name="allowDuplicate">Allow duplicate entries, used for linked modules</param>
            <returns>Reference to the MDB object, either the existing one or the input value</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleCollection.add(System.String,System.Object)">
            <summary>
            Add an object into the list by the unique ID.
            </summary>
            <param name="uid">Unique ID</param>
            <param name="node">the object to add</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleCollection.getItem(System.String)">
            <summary>
            Get a node item by UID
            </summary>
            <param name="uid">Unique ID of the node</param>
            <returns>the item, null if not found</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleCollection.removeItem(OSIsoft.PISDK.Controls.ITvwNode)">
            <summary>
            Remove item from the list
            </summary>
            <param name="node">Tree node to remove</param>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.KeyItem">
            <summary>
            Internal class that forms the glue between the tree nodes and the MDB objects. The objects
            are associated with each other with a unique ID that serves as a key to a list of tree
            nodes that share a single MDB object.
            This class also provides some services that resynchronize the nodes with the MDB object or
            object hierarchy. 
            The MDB object can be refreshed against the server at any time.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.KeyItem.#ctor(System.Object,OSIsoft.PISDK.Controls.ITvwNode,OSIsoft.PISDK.Controls.ModuleCollection)">
            <summary>
            Contructor, creates a new item from MDB ref and tree node.
            </summary>
            <param name="mdbReference">the original (and only) reference to the MDB obbject</param>
            <param name="treeNode">The first tree node that uses the MDB object</param>
            <param name="parent">The main collection, used in recursive functions</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.KeyItem.#ctor(System.Object)">
            <summary>
            Creates a new KeyItem for an object
            </summary>
            <param name="mdbReference">The MDB object</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.KeyItem.freeResources">
            <summary>
            free everything
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.KeyItem.addReference(OSIsoft.PISDK.Controls.ITvwNode)">
            <summary>
            Add a a tree node to this MDB reference. This happens when linked nodes and/or their
            children become visible more than once.
            </summary>
            <param name="newNode">The tree node that references this object</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.KeyItem.removeItem(OSIsoft.PISDK.Controls.ITvwNode)">
            <summary>
            remove item from this node. return true if the node is now empty and can be deleted.
            </summary>
            <param name="tvwNode">Tree node to remove</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.KeyItem.refresh(System.Object)">
            <summary>
            refresh the ref against the server
            </summary>
            <param name="queryDate">Current query date for the database</param>
            <returns>true unless the object doesn't implement IRefresh interface</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.KeyItem.updateReference(System.Object)">
            <summary>
            Helper that update the MDB reference. Used mainly when module value has changed
            due to querydate change and we don't want to totally collapse that tree node. This may
            keep parts of it visible.
            </summary>
            <param name="mdbRef">the new refrence</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.KeyItem.updateNodes(System.Boolean,System.String,System.Object,System.Boolean)">
            <summary>
            A utility method that runs thru the contained tree nodes and invokes their
            update method. Please note that the MDB object reference is first refreshed
            to make sure to it is up to date.
            IMPORTANT NOTE. The implementation of the KeyItem is not totally correct. The early design
            didn't count for the fact that the same item gets updated/invoked several times, i.e. once
            for each tree node. This causes extra database refresh calls, which is bad for performance.
            It is now problematic to handle that because we don't know the order or if the calls are actually
            related (this method can be called several times for different parents and we don't know the difference).
            The code here is quite complex because we try to minimize/delay the effort as much as possible.
            </summary>
            <param name="updateChildren">Update the whole tree brach?</param>
            <param name="parentPath">Reference/parent path</param>
            <param name="queryDate">Current query date for the database</param>
            <param name="doRefresh">Should we refresh the database?</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.KeyItem.deleteMe(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            self destruct, i.e. remove the tree nodes and matching MDB structure.
            First invoke the delete on the treenode (one of them) and then run
            thru all nodes and destroy them.
            <summary>
            <param name="deleteAction">The exact delete method</param>
            </summary>
            <returns>status of operation; 0 = ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.KeyItem.makeNewNode(OSIsoft.PISDK.Controls.ITvwNode,OSIsoft.PISDK.Controls.MDBNodeTypes)">
            <summary>
            Make a new subnode of given type for a given node
            </summary>
            <param name="parentNode">Parent for the new child</param>
            <param name="newType">node type to create</param>
            <returns>the newly created node</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.KeyItem.copyTo(OSIsoft.PISDK.Controls.ITvwNode,System.Collections.SortedList,OSIsoft.PISDK.Controls.MDBModifyTypes,OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            copy/move
            </summary>
            <param name="parentNode">Parent for nodes to be copied</param>
            <param name="source">List of nodes to copy/move</param>
            <param name="copyAction">The copy type</param>
            <param name="sourceAction">Source selection: copy or cut</param>
            <returns>status; 0 = ok</returns>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.KeyItem.MDBReference">
            <summary>
            Gets the database reference for this object
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.KeyItem.NodeCount">
            <summary>
            get # of items in the list
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.KeyItem.NodeList">
            <summary>
            Gets the node list /iterator for the tree nodes (ITvwNode).
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.ValueDialog">
            <summary>
            Form/class for maintaining module versions/values. 
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ValueDialog.#ctor">
            <summary>
            creates a new instance of the value Maintenance Form
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ValueDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ValueDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ValueDialog.refreshView">
            <summary>
            Method that forces a refresh of all the views
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.ValueDialog.editModule">
            <summary>
            The module that is the base for the version/value view
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.ValueDialog.ConfirmDelete">
            <summary>
            Get or sets a values that defines if the user must confirm all Delete operations.
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.ValueDialog.DBDriver">
            <summary>
            Get or sets a reference to current instance of ModuleDB.
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.ListViewBase">
            <summary>
            A class that serves as a base for the derived list views. Each derived class will
            implement the relevant functions depending on the list type (naturally).
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ListViewBase.#ctor">
            <summary>
            Creates a new listBase
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ListViewBase.setCurrentValue(PISDK.PIModule)">
            <summary>
            Set the reference module value for me. Normally this would update the
            listview.
            </summary>
            <param name="theValue">Selected module value</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ListViewBase.getCurrentValue">
            <summary>
            get the current main module value.
            </summary>
            <returns>The current module value</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ListViewBase.setMenu(System.Windows.Forms.ContextMenu)">
            <summary>
            Set the menu for this class
            </summary>
            <param name="menu">My context menu</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ListViewBase.getMenu">
            <summary>
            Get the conext menu based on current select state
            </summary>
            <returns>The menu</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ListViewBase.invokeMenuIfRightClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoke context menu if right click
            </summary>
            <param name="e">mouse event arguments for the click</param>
            <returns>true if menu was invoked</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ListViewBase.setMenuItems(System.Windows.Forms.ListViewItem,System.Boolean)">
            <summary>
            Utility method enables/disables menu items based on copy buffer and selection
            </summary>
            <param name="lItem">list view item that was clinked</param>
            <param name="isItemSelected">Is the item param selected item in the listview</param>
            <returns>true if all ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ListViewBase.selectItemChanged">
            <summary>
            The select item has changed. Update the views if necessary and return the
            new item
            </summary>
            <returns>base always returns null</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ListViewBase.menuItemSelected(System.Windows.Forms.MenuItem)">
            <summary>
            Process menu item selected. Base doeas nothing.
            </summary>
            <param name="mItem">the item that was selected</param>
            <returns>base always returns false</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ListViewBase.isValidDropTarget(System.Windows.Forms.ListViewItem)">
            <summary>
            Check if this list/node is valid drop target. The base tries to retrieve a
            node (ITvwNode) for the list and then calls its isValidDropTarget method.
            If the returned node is null the we return false. 
            </summary>
            <param name="lItem"></param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ListViewBase.makeNodeForActiveObject">
            <summary>
            Creates a disconnected TvwNode for the currently selected item. This is used
            in copy/paste and D and D operations to save/restore clipboard
            </summary>
            <returns>new node, base return null</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ListViewBase.renameNode(System.String)">
            <summary>
            Renames an object
            </summary>
            <param name="newName">The new name</param>
            <returns>false</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ListViewBase.copyFromClipBoard(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Copies data from clipboard
            </summary>
            <param name="copyAction">Type of copy:module, all values, tree...</param>
            <returns>true if copy handled/ok</returns>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.ListViewBase.CopyBuffer">
            <summary>
            Current copy buffer copy/paste and also menu item handler (enable/disable items)
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.ListViewBase.FullParentPath">
            <summary>
            Gets or sets the fullpath to the parent
            </summary>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.ListViewBase.DBDriver">
            <summary>
            Gets or sets a reference to current instance of the ModuleDB
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.ValueListView">
            <summary>
            A listview class that represents the module values/versions list
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ValueListView.setBaseValue(OSIsoft.PISDK.Controls.ModuleNode)">
            <summary>
            Set the main module for the view.
            </summary>
            <param name="theValue"></param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ValueListView.selectItemChanged">
            <summary>
            The select item has changed. Update the views if necessary and return the
            new item
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ValueListView.setMenuItems(System.Windows.Forms.ListViewItem,System.Boolean)">
            <summary>
            Utility method enables/disables menu items based on copy buffer and selection
            </summary>
            <param name="item">list view item that was clinked</param>
            <param name="isItemSelected">Is the item param selected item in the listview</param>
            <returns>true if all ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ValueListView.menuItemSelected(System.Windows.Forms.MenuItem)">
            <summary>
            Process menu item selected. This can be new, edit or delete
            </summary>
            <param name="item">the item that was selected</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ValueListView.copyFromClipBoard(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Copy/paste handler, called by the menu item handlers or D and D. Handles a single value paste
            and single value hierarchy paste (current values)
            </summary>
            <param name="copyAction">Type of copy:module, all values, tree...</param>
            <returns>true if copy handled/ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ValueListView.isValidDropTarget(System.Windows.Forms.ListViewItem)">
            <summary>
            Check if this list/node is valid drop target. The base tries to retrieve a
            node (ITvwNode) for the list and then calls its isValidDropTarget method.
            If the returned node is null the we return false. 
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ValueListView.makeNodeForActiveObject">
            <summary>
            Creates a disconnected TvwNode for the currently selected Value. This is used
            in copy/paste and D and D operations to save/restore clipboard.
            NOTE: we don't use the orginal ModuleNode because it is attached to the current
            value of the tree view
            </summary>
            <returns>SortedList containing the new node, type of ModuleNode</returns>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.ModuleListView">
            <summary>
            A listview class that represents the child module list/view.
            Note that this list is "Sorted" so we can't use the selection indices.
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleListView.setBaseValue(OSIsoft.PISDK.Controls.ModuleNode)">
            <summary>
            Set the main module node, used for some utility functions.
            </summary>
            <param name="theValue"></param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleListView.setCurrentValue(PISDK.PIModule)">
            <summary>
            Set the reference/parent module value for me. Normally this would update the
            listview.
            </summary>
            <param name="theValue">Selected module value</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleListView.setMenuItems(System.Windows.Forms.ListViewItem,System.Boolean)">
            <summary>
            Utility method enables/disables menu items based on copy buffer and selection
            </summary>
            <param name="item">list view item that was clinked</param>
            <param name="isItemSelected">Is the item param selected item in the listview</param>
            <returns>true if all ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleListView.menuItemSelected(System.Windows.Forms.MenuItem)">
            <summary>
            Process menu item selected. This can be new, edit or delete
            </summary>
            <param name="item">the item that was selected</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleListView.renameNode(System.String)">
            <summary>
            Renames an object
            </summary>
            <param name="newName">The new name</param>
            <returns>true if rename ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleListView.copyFromClipBoard(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Copy/paste handler, called by the menu item handlers or D and D. Handles a single value paste
            and single value hierarchy paste (current values)
            </summary>
            <param name="copyAction">Type of copy:module, all values, tree...</param>
            <returns>true if copy handled/ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleListView.isValidDropTarget(System.Windows.Forms.ListViewItem)">
            <summary>
            Check if this list/node is valid drop target. The base tries to retrieve a
            node (ITvwNode) for the list and then calls its isValidDropTarget method.
            If the returned node is null the we return false. 
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.ModuleListView.makeNodeForActiveObject">
            <summary>
            Creates a disconnected TvwNode for the currently selected Value. This is used
            in copy/paste and D and D operations to save/restore clipboard
            </summary>
            <returns>new node, type of ModuleNode</returns>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.PropertyListView">
            <summary>
            A listview class that represents the properties list/view
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyListView.setCurrentValue(PISDK.PIModule)">
            <summary>
            Set the reference module value for me. Normally this would update the
            listview.
            </summary>
            <param name="theValue">Selected module value</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyListView.menuItemSelected(System.Windows.Forms.MenuItem)">
            <summary>
            Process menu item selected. This can be new, edit or delete
            </summary>
            <param name="item">the item that was selected</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyListView.setMenuItems(System.Windows.Forms.ListViewItem,System.Boolean)">
            <summary>
            Utility method enables/disables menu items based on copy buffer and selection
            </summary>
            <param name="item">list view item that was clinked</param>
            <param name="isItemSelected">Is the item param selected item in the listview</param>
            <returns>true if all ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyListView.copyFromClipBoard(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Copy/paste handler, called by the menu item handlers or D and D. Handles a single value paste
            and single value hierarchy paste (current values)
            </summary>
            <param name="copyAction">Type of copy:module, all values, tree...</param>
            <returns>true if copy handled/ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyListView.isValidDropTarget(System.Windows.Forms.ListViewItem)">
            <summary>
            Check if this list/node is valid drop target. The base tries to retrieve a
            node (ITvwNode) for the list and then calls its isValidDropTarget method.
            If the returned node is null the we return false. 
            </summary>
            <param name="item">the selected item</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyListView.makeNodeForActiveObject">
            <summary>
            Creates a disconnected TvwNode for the currently selected Value. This is used
            in copy/paste and D and D operations to save/restore clipboard
            </summary>
            <returns>new node, type of Alias</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.PropertyListView.renameNode(System.String)">
            <summary>
            Renames an object
            </summary>
            <param name="newName">The new name</param>
            <returns>true if rename ok</returns>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.AliasListView">
            <summary>
            A listview class that represents the aliases list/view
            </summary>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasListView.setCurrentValue(PISDK.PIModule)">
            <summary>
            Set the reference module value for me. Normally this would update the
            listview.
            </summary>
            <param name="theValue">Selected module value</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasListView.menuItemSelected(System.Windows.Forms.MenuItem)">
            <summary>
            Process menu item selected. This can be new, edit or delete
            </summary>
            <param name="item">the item that was selected</param>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasListView.setMenuItems(System.Windows.Forms.ListViewItem,System.Boolean)">
            <summary>
            Utility method enables/disables menu items based on copy buffer and selection
            </summary>
            <param name="item">list view item that was clinked</param>
            <param name="isItemSelected">Is the item param selected item in the listview</param>
            <returns>true if all ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasListView.copyFromClipBoard(OSIsoft.PISDK.Controls.MDBModifyTypes)">
            <summary>
            Copy/paste handler, called by the menu item handlers or D and D. Handles a single value paste
            and single value hierarchy paste (current values)
            </summary>
            <param name="copyAction">Type of copy:module, all values, tree...</param>
            <returns>true if copy handled/ok</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasListView.isValidDropTarget(System.Windows.Forms.ListViewItem)">
            <summary>
            Check if this list/node is valid drop target. The base tries to retrieve a
            node (ITvwNode) for the list and then calls its isValidDropTarget method.
            If the returned node is null the we return false. 
            </summary>
            <param name="item">Selected item/item under mouse ptr</param>
            <returns></returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasListView.makeNodeForActiveObject">
            <summary>
            Creates a disconnected TvwNode for the currently selected Value. This is used
            in copy/paste and D and D operations to save/restore clipboard
            </summary>
            <returns>new node, type of Alias</returns>
        </member>
        <member name="M:OSIsoft.PISDK.Controls.AliasListView.renameNode(System.String)">
            <summary>
            Renames an object
            </summary>
            <param name="newName">The new name</param>
            <returns>true if rename ok</returns>
        </member>
    </members>
</doc>
me and persistence string
            </summary>
            <param name="names">refrence to the names string</param>
            <param name="paths">reference to the full pathnames string</param>
            <param name="persists">reference to the persistence strings</param>
            <returns>true (ok) for now</returns>
        </member>
        <member name="P:OSIsoft.PISDK.Controls.ModulesNode.MyServer">
            <summary>
            Returns the PIServer object for this node
            </summary>
        </member>
        <member name="T:OSIsoft.PISDK.Controls.DBNode">
            <summary>
            Class that represent the top level of the hierarchy, i.e. the se