//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace chartDemo.XHQService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MemberInfo", Namespace="http://schemas.datacontract.org/2004/07/Indx.Xhq.Wse")]
    [System.SerializableAttribute()]
    public partial class MemberInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private chartDemo.XHQService.DataType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public chartDemo.XHQService.DataType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataType", Namespace="http://schemas.datacontract.org/2004/07/Indx.Xhq.Wse")]
    public enum DataType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BOOLEAN = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INT = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LONG = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FLOAT = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DOUBLE = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DECIMAL = 20,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DATETIME = 21,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INTERVAL = 22,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        STRING = 54,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TEXT = 59,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VTQ", Namespace="http://schemas.datacontract.org/2004/07/Indx.Xhq.Wse")]
    [System.SerializableAttribute()]
    public partial class VTQ : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QualityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UnitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Quality {
            get {
                return this.QualityField;
            }
            set {
                if ((object.ReferenceEquals(this.QualityField, value) != true)) {
                    this.QualityField = value;
                    this.RaisePropertyChanged("Quality");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Time {
            get {
                return this.TimeField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeField, value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Units {
            get {
                return this.UnitsField;
            }
            set {
                if ((object.ReferenceEquals(this.UnitsField, value) != true)) {
                    this.UnitsField = value;
                    this.RaisePropertyChanged("Units");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PathAccess", Namespace="http://schemas.datacontract.org/2004/07/Indx.Xhq.Wse")]
    [System.SerializableAttribute()]
    public partial class PathAccess : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ReadAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool WriteAccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ReadAccess {
            get {
                return this.ReadAccessField;
            }
            set {
                if ((this.ReadAccessField.Equals(value) != true)) {
                    this.ReadAccessField = value;
                    this.RaisePropertyChanged("ReadAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool WriteAccess {
            get {
                return this.WriteAccessField;
            }
            set {
                if ((this.WriteAccessField.Equals(value) != true)) {
                    this.WriteAccessField = value;
                    this.RaisePropertyChanged("WriteAccess");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://webservices.xhq.siemens.com", ConfigurationName="XHQService.IXhqService")]
    public interface IXhqService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesProvidingR" +
            "eadAccess", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesProvidingR" +
            "eadAccessResponse")]
        string[] GetRolesProvidingReadAccess(string solutionHost, string username, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesProvidingW" +
            "riteAccess", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesProvidingW" +
            "riteAccessResponse")]
        string[] GetRolesProvidingWriteAccess(string solutionHost, string username, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nCount", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nCountResponse")]
        string[] GetCollectionColumnCount(string solutionHost, string path, string column, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nMaximum", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nMaximumResponse")]
        string[] GetCollectionColumnMaximum(string solutionHost, string path, string column, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nMinimum", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nMinimumResponse")]
        string[] GetCollectionColumnMinimum(string solutionHost, string path, string column, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nSum", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nSumResponse")]
        string[] GetCollectionColumnSum(string solutionHost, string path, string column, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionCount" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionCount" +
            "Response")]
        int GetCollectionCount(string solutionHost, string path, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetGlobalCollectio" +
            "ns", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetGlobalCollectio" +
            "nsResponse")]
        string[] GetGlobalCollections(string solutionHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetSolutionRoot", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetSolutionRootRes" +
            "ponse")]
        string GetSolutionRoot(string solutionHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildPrimitiveM" +
            "embers", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildPrimitiveM" +
            "embersResponse")]
        string[] GetChildPrimitiveMembers(string solutionHost, string parentPath, bool showHidden);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildComponentM" +
            "embers", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildComponentM" +
            "embersResponse")]
        string[] GetChildComponentMembers(string solutionHost, string parentPath, bool showHidden);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildCollection" +
            "Members", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildCollection" +
            "MembersResponse")]
        string[] GetChildCollectionMembers(string solutionHost, string parentPath, bool showHidden);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildCollection" +
            "MembersInfo", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildCollection" +
            "MembersInfoResponse")]
        chartDemo.XHQService.MemberInfo[] GetChildCollectionMembersInfo(string solutionHost, string parentPath, bool showHidden);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetAllChildMembers" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetAllChildMembers" +
            "Response")]
        string[] GetAllChildMembers(string solutionHost, string parentPath, bool showHidden);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/WritePointValue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/WritePointValueRes" +
            "ponse")]
        string WritePointValue(string solutionHost, string path, string value, string time, string quality, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/WriteValuesToBacke" +
            "nd", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/WriteValuesToBacke" +
            "ndResponse")]
        string[] WriteValuesToBackend(string solutionHost, string[] pathList, chartDemo.XHQService.VTQ[] vtqList, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/InsertCollectionDa" +
            "ta", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/InsertCollectionDa" +
            "taResponse")]
        bool InsertCollectionData(string solutionHost, string collection, string[] columns, string[][] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/UpdateCollectionDa" +
            "ta", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/UpdateCollectionDa" +
            "taResponse")]
        bool UpdateCollectionData(string solutionHost, string collection, string[] columns, string[][] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/ReplaceCollectionD" +
            "ata", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/ReplaceCollectionD" +
            "ataResponse")]
        bool ReplaceCollectionData(string solutionHost, string collection, string[] columns, string[][] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/DeleteCollectionDa" +
            "ta", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/DeleteCollectionDa" +
            "taResponse")]
        bool DeleteCollectionData(string solutionHost, string collection, string[] columns, string[][] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/ImportModel", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/ImportModelRespons" +
            "e")]
        string ImportModel(byte[] fileStream, string modelServerHost, bool importViews, bool importTemplates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/ImportModelWithCre" +
            "dentials", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/ImportModelWithCre" +
            "dentialsResponse")]
        string ImportModelWithCredentials(byte[] fileStream, string modelServerHost, bool importViews, bool importTemplates, bool encrytptedPassword, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/RefreshRoles", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/RefreshRolesRespon" +
            "se")]
        string[] RefreshRoles(string modelServerHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/RefreshRolesWithCr" +
            "edentials", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/RefreshRolesWithCr" +
            "edentialsResponse")]
        string[] RefreshRolesWithCredentials(string modelServerHost, bool encrytptedPassword, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetXhqciCommandOut" +
            "put", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetXhqciCommandOut" +
            "putResponse")]
        string[] GetXhqciCommandOutput(string key, int lineOffset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPathListAccess", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPathListAccessR" +
            "esponse")]
        chartDemo.XHQService.PathAccess[] GetPathListAccess(string solutionHost, string[] paths, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/CanReadMember", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/CanReadMemberRespo" +
            "nse")]
        bool CanReadMember(string solutionHost, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/CanWriteMember", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/CanWriteMemberResp" +
            "onse")]
        bool CanWriteMember(string solutionHost, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetReadableMembers" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetReadableMembers" +
            "Response")]
        string[] GetReadableMembers(string solutionHost, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetWriteableMember" +
            "s", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetWriteableMember" +
            "sResponse")]
        string[] GetWriteableMembers(string solutionHost, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetUserRoleList", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetUserRoleListRes" +
            "ponse")]
        string[] GetUserRoleList(string solutionHost, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/IsUserInRole", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/IsUserInRoleRespon" +
            "se")]
        bool IsUserInRole(string solutionHost, string username, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesWithReadAc" +
            "cess", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesWithReadAc" +
            "cessResponse")]
        string[] GetRolesWithReadAccess(string solutionHost, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesWithWriteA" +
            "ccess", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesWithWriteA" +
            "ccessResponse")]
        string[] GetRolesWithWriteAccess(string solutionHost, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/Ping", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/PingResponse")]
        bool Ping(string solutionHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/IsSolutionAccessib" +
            "le", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/IsSolutionAccessib" +
            "leResponse")]
        bool IsSolutionAccessible(string solutionHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointCurrentDat" +
            "a", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointCurrentDat" +
            "aResponse")]
        chartDemo.XHQService.VTQ GetPointCurrentData(string solutionHost, string path, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointAtValue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointAtValueRes" +
            "ponse")]
        chartDemo.XHQService.VTQ GetPointAtValue(string solutionHost, string path, string atTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointActualValu" +
            "e", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointActualValu" +
            "eResponse")]
        chartDemo.XHQService.VTQ GetPointActualValue(string solutionHost, string path, string actualTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointAverageVal" +
            "ue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointAverageVal" +
            "ueResponse")]
        chartDemo.XHQService.VTQ GetPointAverageValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointCountValue" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointCountValue" +
            "Response")]
        chartDemo.XHQService.VTQ GetPointCountValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointDeltaValue" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointDeltaValue" +
            "Response")]
        chartDemo.XHQService.VTQ GetPointDeltaValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointFirstValue" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointFirstValue" +
            "Response")]
        chartDemo.XHQService.VTQ GetPointFirstValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointIntegralVa" +
            "lue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointIntegralVa" +
            "lueResponse")]
        chartDemo.XHQService.VTQ GetPointIntegralValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointLastValue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointLastValueR" +
            "esponse")]
        chartDemo.XHQService.VTQ GetPointLastValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointMaximumVal" +
            "ue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointMaximumVal" +
            "ueResponse")]
        chartDemo.XHQService.VTQ GetPointMaximumValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointMinimumVal" +
            "ue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointMinimumVal" +
            "ueResponse")]
        chartDemo.XHQService.VTQ GetPointMinimumValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointSumValue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointSumValueRe" +
            "sponse")]
        chartDemo.XHQService.VTQ GetPointSumValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkCurrentValu" +
            "es", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkCurrentValu" +
            "esResponse")]
        chartDemo.XHQService.VTQ[] GetBulkCurrentValues(string solutionHost, string[] paths, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkAtValues", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkAtValuesRes" +
            "ponse")]
        chartDemo.XHQService.VTQ[] GetBulkAtValues(string solutionHost, string[] paths, string atTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkActualValue" +
            "s", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkActualValue" +
            "sResponse")]
        chartDemo.XHQService.VTQ[] GetBulkActualValues(string solutionHost, string[] paths, string actualTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkAverageValu" +
            "es", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkAverageValu" +
            "esResponse")]
        chartDemo.XHQService.VTQ[] GetBulkAverageValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkCountValues" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkCountValues" +
            "Response")]
        chartDemo.XHQService.VTQ[] GetBulkCountValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkDeltaValues" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkDeltaValues" +
            "Response")]
        chartDemo.XHQService.VTQ[] GetBulkDeltaValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkFirstValues" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkFirstValues" +
            "Response")]
        chartDemo.XHQService.VTQ[] GetBulkFirstValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkLastValues", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkLastValuesR" +
            "esponse")]
        chartDemo.XHQService.VTQ[] GetBulkLastValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkIntegralVal" +
            "ues", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkIntegralVal" +
            "uesResponse")]
        chartDemo.XHQService.VTQ[] GetBulkIntegralValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkMaximumValu" +
            "es", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkMaximumValu" +
            "esResponse")]
        chartDemo.XHQService.VTQ[] GetBulkMaximumValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkMinimumValu" +
            "es", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkMinimumValu" +
            "esResponse")]
        chartDemo.XHQService.VTQ[] GetBulkMinimumValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkSumValues", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkSumValuesRe" +
            "sponse")]
        chartDemo.XHQService.VTQ[] GetBulkSumValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetTimeSeriesData", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetTimeSeriesDataR" +
            "esponse")]
        chartDemo.XHQService.VTQ[] GetTimeSeriesData(string solutionHost, string path, string startTime, string endTime, string timeZone, string samplingMode, int noPoints, string units);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionData", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionDataR" +
            "esponse")]
        string[][] GetCollectionData(string solutionHost, string path, string columns, int rowsCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionDataW" +
            "here", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionDataW" +
            "hereResponse")]
        string[][] GetCollectionDataWhere(string solutionHost, string path, string columns, string whereClause, int rowsCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionDataO" +
            "rderBy", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionDataO" +
            "rderByResponse")]
        string[][] GetCollectionDataOrderBy(string solutionHost, string path, string columns, string orderByClause, int rowsCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionDataF" +
            "ilter", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionDataF" +
            "ilterResponse")]
        string[][] GetCollectionDataFilter(string solutionHost, string path, string columns, string whereClause, string orderByClause, int rowsCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nAverage", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nAverageResponse")]
        string[] GetCollectionColumnAverage(string solutionHost, string path, string column, string whereClause);
        
        // CODEGEN: Generating message contract since element name solutionHost from namespace http://webservices.xhq.siemens.com is not marked nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/IXhqService/GenerateSolutionTreeNode", ReplyAction="http://webservices.xhq.siemens.com/IXhqService/GenerateSolutionTreeNodeResponse")]
        chartDemo.XHQService.GenerateSolutionTreeNodeResponse GenerateSolutionTreeNode(chartDemo.XHQService.GenerateSolutionTreeNodeRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GenerateSolutionTreeNodeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GenerateSolutionTreeNode", Namespace="http://webservices.xhq.siemens.com", Order=0)]
        public chartDemo.XHQService.GenerateSolutionTreeNodeRequestBody Body;
        
        public GenerateSolutionTreeNodeRequest() {
        }
        
        public GenerateSolutionTreeNodeRequest(chartDemo.XHQService.GenerateSolutionTreeNodeRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://webservices.xhq.siemens.com")]
    public partial class GenerateSolutionTreeNodeRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string solutionHost;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string path;
        
        public GenerateSolutionTreeNodeRequestBody() {
        }
        
        public GenerateSolutionTreeNodeRequestBody(string solutionHost, string path) {
            this.solutionHost = solutionHost;
            this.path = path;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GenerateSolutionTreeNodeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GenerateSolutionTreeNodeResponse", Namespace="http://webservices.xhq.siemens.com", Order=0)]
        public chartDemo.XHQService.GenerateSolutionTreeNodeResponseBody Body;
        
        public GenerateSolutionTreeNodeResponse() {
        }
        
        public GenerateSolutionTreeNodeResponse(chartDemo.XHQService.GenerateSolutionTreeNodeResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://webservices.xhq.siemens.com")]
    public partial class GenerateSolutionTreeNodeResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public System.Xml.Linq.XElement GenerateSolutionTreeNodeResult;
        
        public GenerateSolutionTreeNodeResponseBody() {
        }
        
        public GenerateSolutionTreeNodeResponseBody(System.Xml.Linq.XElement GenerateSolutionTreeNodeResult) {
            this.GenerateSolutionTreeNodeResult = GenerateSolutionTreeNodeResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IXhqServiceChannel : chartDemo.XHQService.IXhqService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class XhqServiceClient : System.ServiceModel.ClientBase<chartDemo.XHQService.IXhqService>, chartDemo.XHQService.IXhqService {
        
        public XhqServiceClient() {
        }
        
        public XhqServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public XhqServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public XhqServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public XhqServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetRolesProvidingReadAccess(string solutionHost, string username, string path) {
            return base.Channel.GetRolesProvidingReadAccess(solutionHost, username, path);
        }
        
        public string[] GetRolesProvidingWriteAccess(string solutionHost, string username, string path) {
            return base.Channel.GetRolesProvidingWriteAccess(solutionHost, username, path);
        }
        
        public string[] GetCollectionColumnCount(string solutionHost, string path, string column, string whereClause) {
            return base.Channel.GetCollectionColumnCount(solutionHost, path, column, whereClause);
        }
        
        public string[] GetCollectionColumnMaximum(string solutionHost, string path, string column, string whereClause) {
            return base.Channel.GetCollectionColumnMaximum(solutionHost, path, column, whereClause);
        }
        
        public string[] GetCollectionColumnMinimum(string solutionHost, string path, string column, string whereClause) {
            return base.Channel.GetCollectionColumnMinimum(solutionHost, path, column, whereClause);
        }
        
        public string[] GetCollectionColumnSum(string solutionHost, string path, string column, string whereClause) {
            return base.Channel.GetCollectionColumnSum(solutionHost, path, column, whereClause);
        }
        
        public int GetCollectionCount(string solutionHost, string path, string whereClause) {
            return base.Channel.GetCollectionCount(solutionHost, path, whereClause);
        }
        
        public string[] GetGlobalCollections(string solutionHost) {
            return base.Channel.GetGlobalCollections(solutionHost);
        }
        
        public string GetSolutionRoot(string solutionHost) {
            return base.Channel.GetSolutionRoot(solutionHost);
        }
        
        public string[] GetChildPrimitiveMembers(string solutionHost, string parentPath, bool showHidden) {
            return base.Channel.GetChildPrimitiveMembers(solutionHost, parentPath, showHidden);
        }
        
        public string[] GetChildComponentMembers(string solutionHost, string parentPath, bool showHidden) {
            return base.Channel.GetChildComponentMembers(solutionHost, parentPath, showHidden);
        }
        
        public string[] GetChildCollectionMembers(string solutionHost, string parentPath, bool showHidden) {
            return base.Channel.GetChildCollectionMembers(solutionHost, parentPath, showHidden);
        }
        
        public chartDemo.XHQService.MemberInfo[] GetChildCollectionMembersInfo(string solutionHost, string parentPath, bool showHidden) {
            return base.Channel.GetChildCollectionMembersInfo(solutionHost, parentPath, showHidden);
        }
        
        public string[] GetAllChildMembers(string solutionHost, string parentPath, bool showHidden) {
            return base.Channel.GetAllChildMembers(solutionHost, parentPath, showHidden);
        }
        
        public string WritePointValue(string solutionHost, string path, string value, string time, string quality, string timeZone) {
            return base.Channel.WritePointValue(solutionHost, path, value, time, quality, timeZone);
        }
        
        public string[] WriteValuesToBackend(string solutionHost, string[] pathList, chartDemo.XHQService.VTQ[] vtqList, string timeZone) {
            return base.Channel.WriteValuesToBackend(solutionHost, pathList, vtqList, timeZone);
        }
        
        public bool InsertCollectionData(string solutionHost, string collection, string[] columns, string[][] data) {
            return base.Channel.InsertCollectionData(solutionHost, collection, columns, data);
        }
        
        public bool UpdateCollectionData(string solutionHost, string collection, string[] columns, string[][] data) {
            return base.Channel.UpdateCollectionData(solutionHost, collection, columns, data);
        }
        
        public bool ReplaceCollectionData(string solutionHost, string collection, string[] columns, string[][] data) {
            return base.Channel.ReplaceCollectionData(solutionHost, collection, columns, data);
        }
        
        public bool DeleteCollectionData(string solutionHost, string collection, string[] columns, string[][] data) {
            return base.Channel.DeleteCollectionData(solutionHost, collection, columns, data);
        }
        
        public string ImportModel(byte[] fileStream, string modelServerHost, bool importViews, bool importTemplates) {
            return base.Channel.ImportModel(fileStream, modelServerHost, importViews, importTemplates);
        }
        
        public string ImportModelWithCredentials(byte[] fileStream, string modelServerHost, bool importViews, bool importTemplates, bool encrytptedPassword, string username, string password) {
            return base.Channel.ImportModelWithCredentials(fileStream, modelServerHost, importViews, importTemplates, encrytptedPassword, username, password);
        }
        
        public string[] RefreshRoles(string modelServerHost) {
            return base.Channel.RefreshRoles(modelServerHost);
        }
        
        public string[] RefreshRolesWithCredentials(string modelServerHost, bool encrytptedPassword, string username, string password) {
            return base.Channel.RefreshRolesWithCredentials(modelServerHost, encrytptedPassword, username, password);
        }
        
        public string[] GetXhqciCommandOutput(string key, int lineOffset) {
            return base.Channel.GetXhqciCommandOutput(key, lineOffset);
        }
        
        public chartDemo.XHQService.PathAccess[] GetPathListAccess(string solutionHost, string[] paths, string username) {
            return base.Channel.GetPathListAccess(solutionHost, paths, username);
        }
        
        public bool CanReadMember(string solutionHost, string path) {
            return base.Channel.CanReadMember(solutionHost, path);
        }
        
        public bool CanWriteMember(string solutionHost, string path) {
            return base.Channel.CanWriteMember(solutionHost, path);
        }
        
        public string[] GetReadableMembers(string solutionHost, string path) {
            return base.Channel.GetReadableMembers(solutionHost, path);
        }
        
        public string[] GetWriteableMembers(string solutionHost, string path) {
            return base.Channel.GetWriteableMembers(solutionHost, path);
        }
        
        public string[] GetUserRoleList(string solutionHost, string username) {
            return base.Channel.GetUserRoleList(solutionHost, username);
        }
        
        public bool IsUserInRole(string solutionHost, string username, string roleName) {
            return base.Channel.IsUserInRole(solutionHost, username, roleName);
        }
        
        public string[] GetRolesWithReadAccess(string solutionHost, string path) {
            return base.Channel.GetRolesWithReadAccess(solutionHost, path);
        }
        
        public string[] GetRolesWithWriteAccess(string solutionHost, string path) {
            return base.Channel.GetRolesWithWriteAccess(solutionHost, path);
        }
        
        public bool Ping(string solutionHost) {
            return base.Channel.Ping(solutionHost);
        }
        
        public bool IsSolutionAccessible(string solutionHost) {
            return base.Channel.IsSolutionAccessible(solutionHost);
        }
        
        public chartDemo.XHQService.VTQ GetPointCurrentData(string solutionHost, string path, string units, string timeZone) {
            return base.Channel.GetPointCurrentData(solutionHost, path, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointAtValue(string solutionHost, string path, string atTime, string units, string timeZone) {
            return base.Channel.GetPointAtValue(solutionHost, path, atTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointActualValue(string solutionHost, string path, string actualTime, string units, string timeZone) {
            return base.Channel.GetPointActualValue(solutionHost, path, actualTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointAverageValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointAverageValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointCountValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointCountValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointDeltaValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointDeltaValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointFirstValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointFirstValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointIntegralValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointIntegralValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointLastValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointLastValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointMaximumValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointMaximumValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointMinimumValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointMinimumValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointSumValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointSumValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkCurrentValues(string solutionHost, string[] paths, string units, string timeZone) {
            return base.Channel.GetBulkCurrentValues(solutionHost, paths, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkAtValues(string solutionHost, string[] paths, string atTime, string units, string timeZone) {
            return base.Channel.GetBulkAtValues(solutionHost, paths, atTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkActualValues(string solutionHost, string[] paths, string actualTime, string units, string timeZone) {
            return base.Channel.GetBulkActualValues(solutionHost, paths, actualTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkAverageValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkAverageValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkCountValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkCountValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkDeltaValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkDeltaValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkFirstValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkFirstValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkLastValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkLastValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkIntegralValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkIntegralValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkMaximumValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkMaximumValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkMinimumValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkMinimumValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkSumValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkSumValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetTimeSeriesData(string solutionHost, string path, string startTime, string endTime, string timeZone, string samplingMode, int noPoints, string units) {
            return base.Channel.GetTimeSeriesData(solutionHost, path, startTime, endTime, timeZone, samplingMode, noPoints, units);
        }
        
        public string[][] GetCollectionData(string solutionHost, string path, string columns, int rowsCount) {
            return base.Channel.GetCollectionData(solutionHost, path, columns, rowsCount);
        }
        
        public string[][] GetCollectionDataWhere(string solutionHost, string path, string columns, string whereClause, int rowsCount) {
            return base.Channel.GetCollectionDataWhere(solutionHost, path, columns, whereClause, rowsCount);
        }
        
        public string[][] GetCollectionDataOrderBy(string solutionHost, string path, string columns, string orderByClause, int rowsCount) {
            return base.Channel.GetCollectionDataOrderBy(solutionHost, path, columns, orderByClause, rowsCount);
        }
        
        public string[][] GetCollectionDataFilter(string solutionHost, string path, string columns, string whereClause, string orderByClause, int rowsCount) {
            return base.Channel.GetCollectionDataFilter(solutionHost, path, columns, whereClause, orderByClause, rowsCount);
        }
        
        public string[] GetCollectionColumnAverage(string solutionHost, string path, string column, string whereClause) {
            return base.Channel.GetCollectionColumnAverage(solutionHost, path, column, whereClause);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        chartDemo.XHQService.GenerateSolutionTreeNodeResponse chartDemo.XHQService.IXhqService.GenerateSolutionTreeNode(chartDemo.XHQService.GenerateSolutionTreeNodeRequest request) {
            return base.Channel.GenerateSolutionTreeNode(request);
        }
        
        public System.Xml.Linq.XElement GenerateSolutionTreeNode(string solutionHost, string path) {
            chartDemo.XHQService.GenerateSolutionTreeNodeRequest inValue = new chartDemo.XHQService.GenerateSolutionTreeNodeRequest();
            inValue.Body = new chartDemo.XHQService.GenerateSolutionTreeNodeRequestBody();
            inValue.Body.solutionHost = solutionHost;
            inValue.Body.path = path;
            chartDemo.XHQService.GenerateSolutionTreeNodeResponse retVal = ((chartDemo.XHQService.IXhqService)(this)).GenerateSolutionTreeNode(inValue);
            return retVal.Body.GenerateSolutionTreeNodeResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Name="XHQ Web Service", Namespace="http://webservices.xhq.siemens.com", ConfigurationName="XHQService.XHQWebService")]
    public interface XHQWebService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesProvidingR" +
            "eadAccess", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesProvidingR" +
            "eadAccessResponse")]
        string[] GetRolesProvidingReadAccess(string solutionHost, string username, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesProvidingW" +
            "riteAccess", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesProvidingW" +
            "riteAccessResponse")]
        string[] GetRolesProvidingWriteAccess(string solutionHost, string username, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nCount", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nCountResponse")]
        string[] GetCollectionColumnCount(string solutionHost, string path, string column, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nMaximum", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nMaximumResponse")]
        string[] GetCollectionColumnMaximum(string solutionHost, string path, string column, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nMinimum", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nMinimumResponse")]
        string[] GetCollectionColumnMinimum(string solutionHost, string path, string column, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nSum", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nSumResponse")]
        string[] GetCollectionColumnSum(string solutionHost, string path, string column, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionCount" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionCount" +
            "Response")]
        int GetCollectionCount(string solutionHost, string path, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetGlobalCollectio" +
            "ns", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetGlobalCollectio" +
            "nsResponse")]
        string[] GetGlobalCollections(string solutionHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetSolutionRoot", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetSolutionRootRes" +
            "ponse")]
        string GetSolutionRoot(string solutionHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildPrimitiveM" +
            "embers", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildPrimitiveM" +
            "embersResponse")]
        string[] GetChildPrimitiveMembers(string solutionHost, string parentPath, bool showHidden);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildComponentM" +
            "embers", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildComponentM" +
            "embersResponse")]
        string[] GetChildComponentMembers(string solutionHost, string parentPath, bool showHidden);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildCollection" +
            "Members", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildCollection" +
            "MembersResponse")]
        string[] GetChildCollectionMembers(string solutionHost, string parentPath, bool showHidden);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildCollection" +
            "MembersInfo", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetChildCollection" +
            "MembersInfoResponse")]
        chartDemo.XHQService.MemberInfo[] GetChildCollectionMembersInfo(string solutionHost, string parentPath, bool showHidden);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetAllChildMembers" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetAllChildMembers" +
            "Response")]
        string[] GetAllChildMembers(string solutionHost, string parentPath, bool showHidden);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/WritePointValue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/WritePointValueRes" +
            "ponse")]
        string WritePointValue(string solutionHost, string path, string value, string time, string quality, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/WriteValuesToBacke" +
            "nd", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/WriteValuesToBacke" +
            "ndResponse")]
        string[] WriteValuesToBackend(string solutionHost, string[] pathList, chartDemo.XHQService.VTQ[] vtqList, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/InsertCollectionDa" +
            "ta", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/InsertCollectionDa" +
            "taResponse")]
        bool InsertCollectionData(string solutionHost, string collection, string[] columns, string[][] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/UpdateCollectionDa" +
            "ta", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/UpdateCollectionDa" +
            "taResponse")]
        bool UpdateCollectionData(string solutionHost, string collection, string[] columns, string[][] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/ReplaceCollectionD" +
            "ata", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/ReplaceCollectionD" +
            "ataResponse")]
        bool ReplaceCollectionData(string solutionHost, string collection, string[] columns, string[][] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/DeleteCollectionDa" +
            "ta", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/DeleteCollectionDa" +
            "taResponse")]
        bool DeleteCollectionData(string solutionHost, string collection, string[] columns, string[][] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/ImportModel", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/ImportModelRespons" +
            "e")]
        string ImportModel(byte[] fileStream, string modelServerHost, bool importViews, bool importTemplates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/ImportModelWithCre" +
            "dentials", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/ImportModelWithCre" +
            "dentialsResponse")]
        string ImportModelWithCredentials(byte[] fileStream, string modelServerHost, bool importViews, bool importTemplates, bool encrytptedPassword, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/RefreshRoles", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/RefreshRolesRespon" +
            "se")]
        string[] RefreshRoles(string modelServerHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/RefreshRolesWithCr" +
            "edentials", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/RefreshRolesWithCr" +
            "edentialsResponse")]
        string[] RefreshRolesWithCredentials(string modelServerHost, bool encrytptedPassword, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetXhqciCommandOut" +
            "put", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetXhqciCommandOut" +
            "putResponse")]
        string[] GetXhqciCommandOutput(string key, int lineOffset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPathListAccess", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPathListAccessR" +
            "esponse")]
        chartDemo.XHQService.PathAccess[] GetPathListAccess(string solutionHost, string[] paths, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/CanReadMember", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/CanReadMemberRespo" +
            "nse")]
        bool CanReadMember(string solutionHost, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/CanWriteMember", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/CanWriteMemberResp" +
            "onse")]
        bool CanWriteMember(string solutionHost, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetReadableMembers" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetReadableMembers" +
            "Response")]
        string[] GetReadableMembers(string solutionHost, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetWriteableMember" +
            "s", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetWriteableMember" +
            "sResponse")]
        string[] GetWriteableMembers(string solutionHost, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetUserRoleList", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetUserRoleListRes" +
            "ponse")]
        string[] GetUserRoleList(string solutionHost, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/IsUserInRole", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/IsUserInRoleRespon" +
            "se")]
        bool IsUserInRole(string solutionHost, string username, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesWithReadAc" +
            "cess", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesWithReadAc" +
            "cessResponse")]
        string[] GetRolesWithReadAccess(string solutionHost, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesWithWriteA" +
            "ccess", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetRolesWithWriteA" +
            "ccessResponse")]
        string[] GetRolesWithWriteAccess(string solutionHost, string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/Ping", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/PingResponse")]
        bool Ping(string solutionHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/IsSolutionAccessib" +
            "le", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/IsSolutionAccessib" +
            "leResponse")]
        bool IsSolutionAccessible(string solutionHost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointCurrentDat" +
            "a", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointCurrentDat" +
            "aResponse")]
        chartDemo.XHQService.VTQ GetPointCurrentData(string solutionHost, string path, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointAtValue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointAtValueRes" +
            "ponse")]
        chartDemo.XHQService.VTQ GetPointAtValue(string solutionHost, string path, string atTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointActualValu" +
            "e", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointActualValu" +
            "eResponse")]
        chartDemo.XHQService.VTQ GetPointActualValue(string solutionHost, string path, string actualTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointAverageVal" +
            "ue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointAverageVal" +
            "ueResponse")]
        chartDemo.XHQService.VTQ GetPointAverageValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointCountValue" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointCountValue" +
            "Response")]
        chartDemo.XHQService.VTQ GetPointCountValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointDeltaValue" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointDeltaValue" +
            "Response")]
        chartDemo.XHQService.VTQ GetPointDeltaValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointFirstValue" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointFirstValue" +
            "Response")]
        chartDemo.XHQService.VTQ GetPointFirstValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointIntegralVa" +
            "lue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointIntegralVa" +
            "lueResponse")]
        chartDemo.XHQService.VTQ GetPointIntegralValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointLastValue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointLastValueR" +
            "esponse")]
        chartDemo.XHQService.VTQ GetPointLastValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointMaximumVal" +
            "ue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointMaximumVal" +
            "ueResponse")]
        chartDemo.XHQService.VTQ GetPointMaximumValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointMinimumVal" +
            "ue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointMinimumVal" +
            "ueResponse")]
        chartDemo.XHQService.VTQ GetPointMinimumValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointSumValue", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetPointSumValueRe" +
            "sponse")]
        chartDemo.XHQService.VTQ GetPointSumValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkCurrentValu" +
            "es", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkCurrentValu" +
            "esResponse")]
        chartDemo.XHQService.VTQ[] GetBulkCurrentValues(string solutionHost, string[] paths, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkAtValues", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkAtValuesRes" +
            "ponse")]
        chartDemo.XHQService.VTQ[] GetBulkAtValues(string solutionHost, string[] paths, string atTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkActualValue" +
            "s", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkActualValue" +
            "sResponse")]
        chartDemo.XHQService.VTQ[] GetBulkActualValues(string solutionHost, string[] paths, string actualTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkAverageValu" +
            "es", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkAverageValu" +
            "esResponse")]
        chartDemo.XHQService.VTQ[] GetBulkAverageValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkCountValues" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkCountValues" +
            "Response")]
        chartDemo.XHQService.VTQ[] GetBulkCountValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkDeltaValues" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkDeltaValues" +
            "Response")]
        chartDemo.XHQService.VTQ[] GetBulkDeltaValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkFirstValues" +
            "", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkFirstValues" +
            "Response")]
        chartDemo.XHQService.VTQ[] GetBulkFirstValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkLastValues", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkLastValuesR" +
            "esponse")]
        chartDemo.XHQService.VTQ[] GetBulkLastValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkIntegralVal" +
            "ues", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkIntegralVal" +
            "uesResponse")]
        chartDemo.XHQService.VTQ[] GetBulkIntegralValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkMaximumValu" +
            "es", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkMaximumValu" +
            "esResponse")]
        chartDemo.XHQService.VTQ[] GetBulkMaximumValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkMinimumValu" +
            "es", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkMinimumValu" +
            "esResponse")]
        chartDemo.XHQService.VTQ[] GetBulkMinimumValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkSumValues", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetBulkSumValuesRe" +
            "sponse")]
        chartDemo.XHQService.VTQ[] GetBulkSumValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetTimeSeriesData", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetTimeSeriesDataR" +
            "esponse")]
        chartDemo.XHQService.VTQ[] GetTimeSeriesData(string solutionHost, string path, string startTime, string endTime, string timeZone, string samplingMode, int noPoints, string units);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionData", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionDataR" +
            "esponse")]
        string[][] GetCollectionData(string solutionHost, string path, string columns, int rowsCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionDataW" +
            "here", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionDataW" +
            "hereResponse")]
        string[][] GetCollectionDataWhere(string solutionHost, string path, string columns, string whereClause, int rowsCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionDataO" +
            "rderBy", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionDataO" +
            "rderByResponse")]
        string[][] GetCollectionDataOrderBy(string solutionHost, string path, string columns, string orderByClause, int rowsCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionDataF" +
            "ilter", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionDataF" +
            "ilterResponse")]
        string[][] GetCollectionDataFilter(string solutionHost, string path, string columns, string whereClause, string orderByClause, int rowsCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nAverage", ReplyAction="http://webservices.xhq.siemens.com/XHQ_x0020_Web_x0020_Service/GetCollectionColum" +
            "nAverageResponse")]
        string[] GetCollectionColumnAverage(string solutionHost, string path, string column, string whereClause);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface XHQWebServiceChannel : chartDemo.XHQService.XHQWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class XHQWebServiceClient : System.ServiceModel.ClientBase<chartDemo.XHQService.XHQWebService>, chartDemo.XHQService.XHQWebService {
        
        public XHQWebServiceClient() {
        }
        
        public XHQWebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public XHQWebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public XHQWebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public XHQWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetRolesProvidingReadAccess(string solutionHost, string username, string path) {
            return base.Channel.GetRolesProvidingReadAccess(solutionHost, username, path);
        }
        
        public string[] GetRolesProvidingWriteAccess(string solutionHost, string username, string path) {
            return base.Channel.GetRolesProvidingWriteAccess(solutionHost, username, path);
        }
        
        public string[] GetCollectionColumnCount(string solutionHost, string path, string column, string whereClause) {
            return base.Channel.GetCollectionColumnCount(solutionHost, path, column, whereClause);
        }
        
        public string[] GetCollectionColumnMaximum(string solutionHost, string path, string column, string whereClause) {
            return base.Channel.GetCollectionColumnMaximum(solutionHost, path, column, whereClause);
        }
        
        public string[] GetCollectionColumnMinimum(string solutionHost, string path, string column, string whereClause) {
            return base.Channel.GetCollectionColumnMinimum(solutionHost, path, column, whereClause);
        }
        
        public string[] GetCollectionColumnSum(string solutionHost, string path, string column, string whereClause) {
            return base.Channel.GetCollectionColumnSum(solutionHost, path, column, whereClause);
        }
        
        public int GetCollectionCount(string solutionHost, string path, string whereClause) {
            return base.Channel.GetCollectionCount(solutionHost, path, whereClause);
        }
        
        public string[] GetGlobalCollections(string solutionHost) {
            return base.Channel.GetGlobalCollections(solutionHost);
        }
        
        public string GetSolutionRoot(string solutionHost) {
            return base.Channel.GetSolutionRoot(solutionHost);
        }
        
        public string[] GetChildPrimitiveMembers(string solutionHost, string parentPath, bool showHidden) {
            return base.Channel.GetChildPrimitiveMembers(solutionHost, parentPath, showHidden);
        }
        
        public string[] GetChildComponentMembers(string solutionHost, string parentPath, bool showHidden) {
            return base.Channel.GetChildComponentMembers(solutionHost, parentPath, showHidden);
        }
        
        public string[] GetChildCollectionMembers(string solutionHost, string parentPath, bool showHidden) {
            return base.Channel.GetChildCollectionMembers(solutionHost, parentPath, showHidden);
        }
        
        public chartDemo.XHQService.MemberInfo[] GetChildCollectionMembersInfo(string solutionHost, string parentPath, bool showHidden) {
            return base.Channel.GetChildCollectionMembersInfo(solutionHost, parentPath, showHidden);
        }
        
        public string[] GetAllChildMembers(string solutionHost, string parentPath, bool showHidden) {
            return base.Channel.GetAllChildMembers(solutionHost, parentPath, showHidden);
        }
        
        public string WritePointValue(string solutionHost, string path, string value, string time, string quality, string timeZone) {
            return base.Channel.WritePointValue(solutionHost, path, value, time, quality, timeZone);
        }
        
        public string[] WriteValuesToBackend(string solutionHost, string[] pathList, chartDemo.XHQService.VTQ[] vtqList, string timeZone) {
            return base.Channel.WriteValuesToBackend(solutionHost, pathList, vtqList, timeZone);
        }
        
        public bool InsertCollectionData(string solutionHost, string collection, string[] columns, string[][] data) {
            return base.Channel.InsertCollectionData(solutionHost, collection, columns, data);
        }
        
        public bool UpdateCollectionData(string solutionHost, string collection, string[] columns, string[][] data) {
            return base.Channel.UpdateCollectionData(solutionHost, collection, columns, data);
        }
        
        public bool ReplaceCollectionData(string solutionHost, string collection, string[] columns, string[][] data) {
            return base.Channel.ReplaceCollectionData(solutionHost, collection, columns, data);
        }
        
        public bool DeleteCollectionData(string solutionHost, string collection, string[] columns, string[][] data) {
            return base.Channel.DeleteCollectionData(solutionHost, collection, columns, data);
        }
        
        public string ImportModel(byte[] fileStream, string modelServerHost, bool importViews, bool importTemplates) {
            return base.Channel.ImportModel(fileStream, modelServerHost, importViews, importTemplates);
        }
        
        public string ImportModelWithCredentials(byte[] fileStream, string modelServerHost, bool importViews, bool importTemplates, bool encrytptedPassword, string username, string password) {
            return base.Channel.ImportModelWithCredentials(fileStream, modelServerHost, importViews, importTemplates, encrytptedPassword, username, password);
        }
        
        public string[] RefreshRoles(string modelServerHost) {
            return base.Channel.RefreshRoles(modelServerHost);
        }
        
        public string[] RefreshRolesWithCredentials(string modelServerHost, bool encrytptedPassword, string username, string password) {
            return base.Channel.RefreshRolesWithCredentials(modelServerHost, encrytptedPassword, username, password);
        }
        
        public string[] GetXhqciCommandOutput(string key, int lineOffset) {
            return base.Channel.GetXhqciCommandOutput(key, lineOffset);
        }
        
        public chartDemo.XHQService.PathAccess[] GetPathListAccess(string solutionHost, string[] paths, string username) {
            return base.Channel.GetPathListAccess(solutionHost, paths, username);
        }
        
        public bool CanReadMember(string solutionHost, string path) {
            return base.Channel.CanReadMember(solutionHost, path);
        }
        
        public bool CanWriteMember(string solutionHost, string path) {
            return base.Channel.CanWriteMember(solutionHost, path);
        }
        
        public string[] GetReadableMembers(string solutionHost, string path) {
            return base.Channel.GetReadableMembers(solutionHost, path);
        }
        
        public string[] GetWriteableMembers(string solutionHost, string path) {
            return base.Channel.GetWriteableMembers(solutionHost, path);
        }
        
        public string[] GetUserRoleList(string solutionHost, string username) {
            return base.Channel.GetUserRoleList(solutionHost, username);
        }
        
        public bool IsUserInRole(string solutionHost, string username, string roleName) {
            return base.Channel.IsUserInRole(solutionHost, username, roleName);
        }
        
        public string[] GetRolesWithReadAccess(string solutionHost, string path) {
            return base.Channel.GetRolesWithReadAccess(solutionHost, path);
        }
        
        public string[] GetRolesWithWriteAccess(string solutionHost, string path) {
            return base.Channel.GetRolesWithWriteAccess(solutionHost, path);
        }
        
        public bool Ping(string solutionHost) {
            return base.Channel.Ping(solutionHost);
        }
        
        public bool IsSolutionAccessible(string solutionHost) {
            return base.Channel.IsSolutionAccessible(solutionHost);
        }
        
        public chartDemo.XHQService.VTQ GetPointCurrentData(string solutionHost, string path, string units, string timeZone) {
            return base.Channel.GetPointCurrentData(solutionHost, path, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointAtValue(string solutionHost, string path, string atTime, string units, string timeZone) {
            return base.Channel.GetPointAtValue(solutionHost, path, atTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointActualValue(string solutionHost, string path, string actualTime, string units, string timeZone) {
            return base.Channel.GetPointActualValue(solutionHost, path, actualTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointAverageValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointAverageValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointCountValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointCountValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointDeltaValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointDeltaValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointFirstValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointFirstValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointIntegralValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointIntegralValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointLastValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointLastValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointMaximumValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointMaximumValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointMinimumValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointMinimumValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ GetPointSumValue(string solutionHost, string path, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetPointSumValue(solutionHost, path, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkCurrentValues(string solutionHost, string[] paths, string units, string timeZone) {
            return base.Channel.GetBulkCurrentValues(solutionHost, paths, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkAtValues(string solutionHost, string[] paths, string atTime, string units, string timeZone) {
            return base.Channel.GetBulkAtValues(solutionHost, paths, atTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkActualValues(string solutionHost, string[] paths, string actualTime, string units, string timeZone) {
            return base.Channel.GetBulkActualValues(solutionHost, paths, actualTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkAverageValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkAverageValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkCountValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkCountValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkDeltaValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkDeltaValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkFirstValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkFirstValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkLastValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkLastValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkIntegralValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkIntegralValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkMaximumValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkMaximumValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkMinimumValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkMinimumValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetBulkSumValues(string solutionHost, string[] paths, string startTime, string endTime, string units, string timeZone) {
            return base.Channel.GetBulkSumValues(solutionHost, paths, startTime, endTime, units, timeZone);
        }
        
        public chartDemo.XHQService.VTQ[] GetTimeSeriesData(string solutionHost, string path, string startTime, string endTime, string timeZone, string samplingMode, int noPoints, string units) {
            return base.Channel.GetTimeSeriesData(solutionHost, path, startTime, endTime, timeZone, samplingMode, noPoints, units);
        }
        
        public string[][] GetCollectionData(string solutionHost, string path, string columns, int rowsCount) {
            return base.Channel.GetCollectionData(solutionHost, path, columns, rowsCount);
        }
        
        public string[][] GetCollectionDataWhere(string solutionHost, string path, string columns, string whereClause, int rowsCount) {
            return base.Channel.GetCollectionDataWhere(solutionHost, path, columns, whereClause, rowsCount);
        }
        
        public string[][] GetCollectionDataOrderBy(string solutionHost, string path, string columns, string orderByClause, int rowsCount) {
            return base.Channel.GetCollectionDataOrderBy(solutionHost, path, columns, orderByClause, rowsCount);
        }
        
        public string[][] GetCollectionDataFilter(string solutionHost, string path, string columns, string whereClause, string orderByClause, int rowsCount) {
            return base.Channel.GetCollectionDataFilter(solutionHost, path, columns, whereClause, orderByClause, rowsCount);
        }
        
        public string[] GetCollectionColumnAverage(string solutionHost, string path, string column, string whereClause) {
            return base.Channel.GetCollectionColumnAverage(solutionHost, path, column, whereClause);
        }
    }
}
